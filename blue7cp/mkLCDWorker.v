//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Fri Sep 21 15:44:38 EDT 2012
//
// Method conflict info:
// Method: wciS0_mCmd
// Conflict-free: wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: wciS0_mCmd
//
// Method: wciS0_mAddrSpace
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: wciS0_mAddrSpace
//
// Method: wciS0_mByteEn
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: wciS0_mByteEn
//
// Method: wciS0_mAddr
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: wciS0_mAddr
//
// Method: wciS0_mData
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: wciS0_mData
//
// Method: wciS0_sResp
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: wciS0_sData
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: wciS0_sThreadBusy
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: wciS0_sFlag
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: wciS0_mFlag
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_db
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_e
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_rs
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_rw
// Conflict-free: wciS0_mCmd,
// 	       wciS0_mAddrSpace,
// 	       wciS0_mByteEn,
// 	       wciS0_mAddr,
// 	       wciS0_mData,
// 	       wciS0_sResp,
// 	       wciS0_sData,
// 	       wciS0_sThreadBusy,
// 	       wciS0_sFlag,
// 	       wciS0_mFlag,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
//
// Ports:
// Name                         I/O  size props
// wciS0_SResp                    O     2 reg
// wciS0_SData                    O    32 reg
// wciS0_SThreadBusy              O     1
// wciS0_SFlag                    O     2
// lcd_db                         O     4
// lcd_e                          O     1
// lcd_rs                         O     1
// lcd_rw                         O     1 const
// wciS0_Clk                      I     1 clock
// wciS0_MReset_n                 I     1 reset
// wciS0_MCmd                     I     3
// wciS0_MAddrSpace               I     1
// wciS0_MByteEn                  I     4
// wciS0_MAddr                    I    32
// wciS0_MData                    I    32
// wciS0_MFlag                    I     2 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkLCDWorker(wciS0_Clk,
		   wciS0_MReset_n,

		   wciS0_MCmd,

		   wciS0_MAddrSpace,

		   wciS0_MByteEn,

		   wciS0_MAddr,

		   wciS0_MData,

		   wciS0_SResp,

		   wciS0_SData,

		   wciS0_SThreadBusy,

		   wciS0_SFlag,

		   wciS0_MFlag,

		   lcd_db,

		   lcd_e,

		   lcd_rs,

		   lcd_rw);
  parameter [0 : 0] hasDebugLogic = 1'b0;
  input  wciS0_Clk;
  input  wciS0_MReset_n;

  // action method wciS0_mCmd
  input  [2 : 0] wciS0_MCmd;

  // action method wciS0_mAddrSpace
  input  wciS0_MAddrSpace;

  // action method wciS0_mByteEn
  input  [3 : 0] wciS0_MByteEn;

  // action method wciS0_mAddr
  input  [31 : 0] wciS0_MAddr;

  // action method wciS0_mData
  input  [31 : 0] wciS0_MData;

  // value method wciS0_sResp
  output [1 : 0] wciS0_SResp;

  // value method wciS0_sData
  output [31 : 0] wciS0_SData;

  // value method wciS0_sThreadBusy
  output wciS0_SThreadBusy;

  // value method wciS0_sFlag
  output [1 : 0] wciS0_SFlag;

  // action method wciS0_mFlag
  input  [1 : 0] wciS0_MFlag;

  // value method lcd_db
  output [3 : 0] lcd_db;

  // value method lcd_e
  output lcd_e;

  // value method lcd_rs
  output lcd_rs;

  // value method lcd_rw
  output lcd_rw;

  // signals for module outputs
  wire [31 : 0] wciS0_SData;
  wire [3 : 0] lcd_db;
  wire [1 : 0] wciS0_SFlag, wciS0_SResp;
  wire lcd_e, lcd_rs, lcd_rw, wciS0_SThreadBusy;

  // inlined wires
  wire [71 : 0] wci_wslv_wciReq$wget;
  wire wci_wslv_ctlAckReg_1$whas,
       wci_wslv_reqF_r_deq$whas,
       wci_wslv_respF_enqueueing$whas,
       wci_wslv_respF_x_wire$whas,
       wci_wslv_wci_cfrd_pw$whas,
       wci_wslv_wci_cfwr_pw$whas,
       wci_wslv_wci_ctrl_pw$whas;

  // register b18
  reg [7 : 0] b18;
  wire [7 : 0] b18$D_IN;
  wire b18$EN;

  // register b19
  reg [7 : 0] b19;
  wire [7 : 0] b19$D_IN;
  wire b19$EN;

  // register b1A
  reg [7 : 0] b1A;
  wire [7 : 0] b1A$D_IN;
  wire b1A$EN;

  // register b1B
  reg [7 : 0] b1B;
  wire [7 : 0] b1B$D_IN;
  wire b1B$EN;

  // register needs_init
  reg needs_init;
  wire needs_init$D_IN, needs_init$EN;

  // register r0
  reg [31 : 0] r0;
  wire [31 : 0] r0$D_IN;
  wire r0$EN;

  // register r10
  reg [31 : 0] r10;
  wire [31 : 0] r10$D_IN;
  wire r10$EN;

  // register r14
  reg [31 : 0] r14;
  wire [31 : 0] r14$D_IN;
  wire r14$EN;

  // register r1C
  reg [31 : 0] r1C;
  wire [31 : 0] r1C$D_IN;
  wire r1C$EN;

  // register r20
  reg [31 : 0] r20;
  wire [31 : 0] r20$D_IN;
  wire r20$EN;

  // register r24
  reg [31 : 0] r24;
  wire [31 : 0] r24$D_IN;
  wire r24$EN;

  // register r28
  reg [31 : 0] r28;
  wire [31 : 0] r28$D_IN;
  wire r28$EN;

  // register r4
  reg [31 : 0] r4;
  wire [31 : 0] r4$D_IN;
  wire r4$EN;

  // register r8
  reg [31 : 0] r8;
  wire [31 : 0] r8$D_IN;
  wire r8$EN;

  // register rC
  reg [31 : 0] rC;
  wire [31 : 0] rC$D_IN;
  wire rC$EN;

  // register sFlagState
  reg sFlagState;
  wire sFlagState$D_IN, sFlagState$EN;

  // register wci_wslv_cEdge
  reg [2 : 0] wci_wslv_cEdge;
  wire [2 : 0] wci_wslv_cEdge$D_IN;
  wire wci_wslv_cEdge$EN;

  // register wci_wslv_cState
  reg [2 : 0] wci_wslv_cState;
  wire [2 : 0] wci_wslv_cState$D_IN;
  wire wci_wslv_cState$EN;

  // register wci_wslv_ctlAckReg
  reg wci_wslv_ctlAckReg;
  wire wci_wslv_ctlAckReg$D_IN, wci_wslv_ctlAckReg$EN;

  // register wci_wslv_ctlOpActive
  reg wci_wslv_ctlOpActive;
  wire wci_wslv_ctlOpActive$D_IN, wci_wslv_ctlOpActive$EN;

  // register wci_wslv_illegalEdge
  reg wci_wslv_illegalEdge;
  wire wci_wslv_illegalEdge$D_IN, wci_wslv_illegalEdge$EN;

  // register wci_wslv_isReset_isInReset
  reg wci_wslv_isReset_isInReset;
  wire wci_wslv_isReset_isInReset$D_IN, wci_wslv_isReset_isInReset$EN;

  // register wci_wslv_nState
  reg [2 : 0] wci_wslv_nState;
  reg [2 : 0] wci_wslv_nState$D_IN;
  wire wci_wslv_nState$EN;

  // register wci_wslv_reqF_countReg
  reg [1 : 0] wci_wslv_reqF_countReg;
  wire [1 : 0] wci_wslv_reqF_countReg$D_IN;
  wire wci_wslv_reqF_countReg$EN;

  // register wci_wslv_respF_c_r
  reg [1 : 0] wci_wslv_respF_c_r;
  wire [1 : 0] wci_wslv_respF_c_r$D_IN;
  wire wci_wslv_respF_c_r$EN;

  // register wci_wslv_respF_q_0
  reg [33 : 0] wci_wslv_respF_q_0;
  reg [33 : 0] wci_wslv_respF_q_0$D_IN;
  wire wci_wslv_respF_q_0$EN;

  // register wci_wslv_respF_q_1
  reg [33 : 0] wci_wslv_respF_q_1;
  reg [33 : 0] wci_wslv_respF_q_1$D_IN;
  wire wci_wslv_respF_q_1$EN;

  // register wci_wslv_sFlagReg
  reg wci_wslv_sFlagReg;
  wire wci_wslv_sFlagReg$D_IN, wci_wslv_sFlagReg$EN;

  // register wci_wslv_sThreadBusy_d
  reg wci_wslv_sThreadBusy_d;
  wire wci_wslv_sThreadBusy_d$D_IN, wci_wslv_sThreadBusy_d$EN;

  // register wrt8
  reg wrt8;
  wire wrt8$D_IN, wrt8$EN;

  // ports of submodule lcd_ctrl
  wire [127 : 0] lcd_ctrl$setLine1_text, lcd_ctrl$setLine2_text;
  wire [3 : 0] lcd_ctrl$db;
  wire lcd_ctrl$EN_setLine1,
       lcd_ctrl$EN_setLine2,
       lcd_ctrl$e,
       lcd_ctrl$rs,
       lcd_ctrl$rw;

  // ports of submodule wci_wslv_reqF
  wire [71 : 0] wci_wslv_reqF$D_IN, wci_wslv_reqF$D_OUT;
  wire wci_wslv_reqF$CLR,
       wci_wslv_reqF$DEQ,
       wci_wslv_reqF$EMPTY_N,
       wci_wslv_reqF$ENQ;

  // rule scheduling signals
  wire CAN_FIRE_RL_actOnWrt8,
       CAN_FIRE_RL_init_lcd,
       CAN_FIRE_RL_updateSflag,
       CAN_FIRE_RL_wci_cfrd,
       CAN_FIRE_RL_wci_cfwr,
       CAN_FIRE_RL_wci_ctrl_EiI,
       CAN_FIRE_RL_wci_ctrl_IsO,
       CAN_FIRE_RL_wci_ctrl_OrE,
       CAN_FIRE_RL_wci_wci_Es_doAlways_Req,
       CAN_FIRE_RL_wci_wslv_ctlAckReg__dreg_update,
       CAN_FIRE_RL_wci_wslv_ctl_op_complete,
       CAN_FIRE_RL_wci_wslv_ctl_op_start,
       CAN_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate,
       CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter,
       CAN_FIRE_RL_wci_wslv_reqF_enq,
       CAN_FIRE_RL_wci_wslv_request_decode,
       CAN_FIRE_RL_wci_wslv_respF_both,
       CAN_FIRE_RL_wci_wslv_respF_decCtr,
       CAN_FIRE_RL_wci_wslv_respF_deq,
       CAN_FIRE_RL_wci_wslv_respF_incCtr,
       CAN_FIRE_RL_wci_wslv_sFlagReg__dreg_update,
       CAN_FIRE_RL_wci_wslv_sThreadBusy_reg,
       CAN_FIRE___me_check_15,
       CAN_FIRE___me_check_16,
       CAN_FIRE___me_check_18,
       CAN_FIRE___me_check_19,
       CAN_FIRE_wciS0_mAddr,
       CAN_FIRE_wciS0_mAddrSpace,
       CAN_FIRE_wciS0_mByteEn,
       CAN_FIRE_wciS0_mCmd,
       CAN_FIRE_wciS0_mData,
       CAN_FIRE_wciS0_mFlag,
       WILL_FIRE_RL_actOnWrt8,
       WILL_FIRE_RL_init_lcd,
       WILL_FIRE_RL_updateSflag,
       WILL_FIRE_RL_wci_cfrd,
       WILL_FIRE_RL_wci_cfwr,
       WILL_FIRE_RL_wci_ctrl_EiI,
       WILL_FIRE_RL_wci_ctrl_IsO,
       WILL_FIRE_RL_wci_ctrl_OrE,
       WILL_FIRE_RL_wci_wci_Es_doAlways_Req,
       WILL_FIRE_RL_wci_wslv_ctlAckReg__dreg_update,
       WILL_FIRE_RL_wci_wslv_ctl_op_complete,
       WILL_FIRE_RL_wci_wslv_ctl_op_start,
       WILL_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate,
       WILL_FIRE_RL_wci_wslv_reqF__updateLevelCounter,
       WILL_FIRE_RL_wci_wslv_reqF_enq,
       WILL_FIRE_RL_wci_wslv_request_decode,
       WILL_FIRE_RL_wci_wslv_respF_both,
       WILL_FIRE_RL_wci_wslv_respF_decCtr,
       WILL_FIRE_RL_wci_wslv_respF_deq,
       WILL_FIRE_RL_wci_wslv_respF_incCtr,
       WILL_FIRE_RL_wci_wslv_sFlagReg__dreg_update,
       WILL_FIRE_RL_wci_wslv_sThreadBusy_reg,
       WILL_FIRE___me_check_15,
       WILL_FIRE___me_check_16,
       WILL_FIRE___me_check_18,
       WILL_FIRE___me_check_19,
       WILL_FIRE_wciS0_mAddr,
       WILL_FIRE_wciS0_mAddrSpace,
       WILL_FIRE_wciS0_mByteEn,
       WILL_FIRE_wciS0_mCmd,
       WILL_FIRE_wciS0_mData,
       WILL_FIRE_wciS0_mFlag;

  // inputs to muxes for submodule ports
  reg [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_1;
  wire [127 : 0] MUX_lcd_ctrl$setLine1_1__VAL_1,
		 MUX_lcd_ctrl$setLine2_1__VAL_1;
  wire [33 : 0] MUX_wci_wslv_respF_q_0$write_1__VAL_2,
		MUX_wci_wslv_respF_q_1$write_1__VAL_2,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_1,
		MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
  wire [1 : 0] MUX_wci_wslv_respF_c_r$write_1__VAL_1,
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2;
  wire MUX_wci_wslv_illegalEdge$write_1__SEL_1,
       MUX_wci_wslv_illegalEdge$write_1__SEL_2,
       MUX_wci_wslv_illegalEdge$write_1__VAL_2,
       MUX_wci_wslv_respF_q_0$write_1__SEL_1,
       MUX_wci_wslv_respF_q_1$write_1__SEL_1,
       MUX_wrt8$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h10442, v__h10595, v__h3621, v__h3795, v__h3939;
  reg [31 : 0] _theResult____h10579;
  wire [31 : 0] _theResult_____2__h10673,
		_theResult_____3__h10672,
		_theResult____h10671,
		myBytes___1__h10826,
		myBytes__h10703,
		myBytes__h10744,
		myBytes__h10785,
		rdat__h10674,
		rdat__h10906,
		y__h10715,
		y__h10756,
		y__h10797;

  // action method wciS0_mCmd
  assign CAN_FIRE_wciS0_mCmd = 1'd1 ;
  assign WILL_FIRE_wciS0_mCmd = 1'd1 ;

  // action method wciS0_mAddrSpace
  assign CAN_FIRE_wciS0_mAddrSpace = 1'd1 ;
  assign WILL_FIRE_wciS0_mAddrSpace = 1'd1 ;

  // action method wciS0_mByteEn
  assign CAN_FIRE_wciS0_mByteEn = 1'd1 ;
  assign WILL_FIRE_wciS0_mByteEn = 1'd1 ;

  // action method wciS0_mAddr
  assign CAN_FIRE_wciS0_mAddr = 1'd1 ;
  assign WILL_FIRE_wciS0_mAddr = 1'd1 ;

  // action method wciS0_mData
  assign CAN_FIRE_wciS0_mData = 1'd1 ;
  assign WILL_FIRE_wciS0_mData = 1'd1 ;

  // value method wciS0_sResp
  assign wciS0_SResp = wci_wslv_respF_q_0[33:32] ;

  // value method wciS0_sData
  assign wciS0_SData = wci_wslv_respF_q_0[31:0] ;

  // value method wciS0_sThreadBusy
  assign wciS0_SThreadBusy =
	     wci_wslv_reqF_countReg > 2'd1 || wci_wslv_isReset_isInReset ;

  // value method wciS0_sFlag
  assign wciS0_SFlag = { 1'd1, wci_wslv_sFlagReg } ;

  // action method wciS0_mFlag
  assign CAN_FIRE_wciS0_mFlag = 1'd1 ;
  assign WILL_FIRE_wciS0_mFlag = 1'd1 ;

  // value method lcd_db
  assign lcd_db = lcd_ctrl$db ;

  // value method lcd_e
  assign lcd_e = lcd_ctrl$e ;

  // value method lcd_rs
  assign lcd_rs = lcd_ctrl$rs ;

  // value method lcd_rw
  assign lcd_rw = lcd_ctrl$rw ;

  // submodule lcd_ctrl
  mkLCDController lcd_ctrl(.CLK(wciS0_Clk),
			   .RST_N(wciS0_MReset_n),
			   .setLine1_text(lcd_ctrl$setLine1_text),
			   .setLine2_text(lcd_ctrl$setLine2_text),
			   .EN_setLine1(lcd_ctrl$EN_setLine1),
			   .EN_setLine2(lcd_ctrl$EN_setLine2),
			   .db(lcd_ctrl$db),
			   .e(lcd_ctrl$e),
			   .rs(lcd_ctrl$rs),
			   .rw(lcd_ctrl$rw));

  // submodule wci_wslv_reqF
  SizedFIFO #(.p1width(32'd72),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wci_wslv_reqF(.RST_N(wciS0_MReset_n),
					     .CLK(wciS0_Clk),
					     .D_IN(wci_wslv_reqF$D_IN),
					     .ENQ(wci_wslv_reqF$ENQ),
					     .DEQ(wci_wslv_reqF$DEQ),
					     .CLR(wci_wslv_reqF$CLR),
					     .D_OUT(wci_wslv_reqF$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(wci_wslv_reqF$EMPTY_N));

  // rule RL_init_lcd
  assign CAN_FIRE_RL_init_lcd = needs_init ;
  assign WILL_FIRE_RL_init_lcd = needs_init ;

  // rule RL_actOnWrt8
  assign CAN_FIRE_RL_actOnWrt8 = wrt8 ;
  assign WILL_FIRE_RL_actOnWrt8 = wrt8 ;

  // rule RL_updateSflag
  assign CAN_FIRE_RL_updateSflag = sFlagState ;
  assign WILL_FIRE_RL_updateSflag = sFlagState ;

  // rule RL_wci_wslv_request_decode
  assign CAN_FIRE_RL_wci_wslv_request_decode = wci_wslv_reqF$EMPTY_N ;
  assign WILL_FIRE_RL_wci_wslv_request_decode = wci_wslv_reqF$EMPTY_N ;

  // rule RL_wci_wslv_sThreadBusy_reg
  assign CAN_FIRE_RL_wci_wslv_sThreadBusy_reg = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_sThreadBusy_reg = 1'd1 ;

  // rule RL_wci_wslv_respF_deq
  assign CAN_FIRE_RL_wci_wslv_respF_deq = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_respF_deq = 1'd1 ;

  // rule RL_wci_cfwr
  assign CAN_FIRE_RL_wci_cfwr =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_reqF$EMPTY_N &&
	     wci_wslv_wci_cfwr_pw$whas ;
  assign WILL_FIRE_RL_wci_cfwr =
	     CAN_FIRE_RL_wci_cfwr && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_cfrd
  assign CAN_FIRE_RL_wci_cfrd =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_reqF$EMPTY_N &&
	     wci_wslv_wci_cfrd_pw$whas ;
  assign WILL_FIRE_RL_wci_cfrd =
	     CAN_FIRE_RL_wci_cfrd && !WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_ctl_op_start
  assign CAN_FIRE_RL_wci_wslv_ctl_op_start =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_wci_ctrl_pw$whas ;
  assign WILL_FIRE_RL_wci_wslv_ctl_op_start =
	     CAN_FIRE_RL_wci_wslv_ctl_op_start &&
	     !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_ctrl_EiI
  assign CAN_FIRE_RL_wci_ctrl_EiI =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd0 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd0 ;
  assign WILL_FIRE_RL_wci_ctrl_EiI = CAN_FIRE_RL_wci_ctrl_EiI ;

  // rule RL_wci_ctrl_IsO
  assign CAN_FIRE_RL_wci_ctrl_IsO =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd1 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd1 ;
  assign WILL_FIRE_RL_wci_ctrl_IsO = CAN_FIRE_RL_wci_ctrl_IsO ;

  // rule RL_wci_ctrl_OrE
  assign CAN_FIRE_RL_wci_ctrl_OrE =
	     wci_wslv_wci_ctrl_pw$whas &&
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     wci_wslv_cState == 3'd2 &&
	     wci_wslv_reqF$D_OUT[36:34] == 3'd3 ;
  assign WILL_FIRE_RL_wci_ctrl_OrE = CAN_FIRE_RL_wci_ctrl_OrE ;

  // rule __me_check_15
  assign CAN_FIRE___me_check_15 = 1'b1 ;
  assign WILL_FIRE___me_check_15 = 1'b1 ;

  // rule __me_check_16
  assign CAN_FIRE___me_check_16 = 1'b1 ;
  assign WILL_FIRE___me_check_16 = 1'b1 ;

  // rule __me_check_18
  assign CAN_FIRE___me_check_18 = 1'b1 ;
  assign WILL_FIRE___me_check_18 = 1'b1 ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule RL_wci_wslv_ctl_op_complete
  assign CAN_FIRE_RL_wci_wslv_ctl_op_complete =
	     wci_wslv_respF_c_r != 2'd2 && wci_wslv_ctlOpActive &&
	     wci_wslv_ctlAckReg ;
  assign WILL_FIRE_RL_wci_wslv_ctl_op_complete =
	     CAN_FIRE_RL_wci_wslv_ctl_op_complete ;

  // rule RL_wci_wslv_respF_incCtr
  assign CAN_FIRE_RL_wci_wslv_respF_incCtr =
	     ((wci_wslv_respF_c_r == 2'd0) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd1 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_enqueueing$whas &&
	     !(wci_wslv_respF_c_r != 2'd0) ;
  assign WILL_FIRE_RL_wci_wslv_respF_incCtr =
	     CAN_FIRE_RL_wci_wslv_respF_incCtr ;

  // rule RL_wci_wslv_respF_decCtr
  assign CAN_FIRE_RL_wci_wslv_respF_decCtr =
	     wci_wslv_respF_c_r != 2'd0 && !wci_wslv_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_wslv_respF_decCtr =
	     CAN_FIRE_RL_wci_wslv_respF_decCtr ;

  // rule RL_wci_wslv_respF_both
  assign CAN_FIRE_RL_wci_wslv_respF_both =
	     ((wci_wslv_respF_c_r == 2'd1) ?
		wci_wslv_respF_x_wire$whas :
		wci_wslv_respF_c_r != 2'd2 || wci_wslv_respF_x_wire$whas) &&
	     wci_wslv_respF_c_r != 2'd0 &&
	     wci_wslv_respF_enqueueing$whas ;
  assign WILL_FIRE_RL_wci_wslv_respF_both = CAN_FIRE_RL_wci_wslv_respF_both ;

  // rule RL_wci_wslv_sFlagReg__dreg_update
  assign CAN_FIRE_RL_wci_wslv_sFlagReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_sFlagReg__dreg_update = 1'd1 ;

  // rule RL_wci_wslv_ctlAckReg__dreg_update
  assign CAN_FIRE_RL_wci_wslv_ctlAckReg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wci_wslv_ctlAckReg__dreg_update = 1'd1 ;

  // rule RL_wci_wslv_isReset_isResetAssertedUpdate
  assign CAN_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate =
	     wci_wslv_isReset_isInReset ;
  assign WILL_FIRE_RL_wci_wslv_isReset_isResetAssertedUpdate =
	     wci_wslv_isReset_isInReset ;

  // rule RL_wci_wci_Es_doAlways_Req
  assign CAN_FIRE_RL_wci_wci_Es_doAlways_Req = 1'd1 ;
  assign WILL_FIRE_RL_wci_wci_Es_doAlways_Req = 1'd1 ;

  // rule RL_wci_wslv_reqF_enq
  assign CAN_FIRE_RL_wci_wslv_reqF_enq = wci_wslv_wciReq$wget[71:69] != 3'd0 ;
  assign WILL_FIRE_RL_wci_wslv_reqF_enq = CAN_FIRE_RL_wci_wslv_reqF_enq ;

  // rule RL_wci_wslv_reqF__updateLevelCounter
  assign CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) !=
	     wci_wslv_reqF_r_deq$whas ;
  assign WILL_FIRE_RL_wci_wslv_reqF__updateLevelCounter =
	     CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter ;

  // inputs to muxes for submodule ports
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ;
  assign MUX_wci_wslv_illegalEdge$write_1__SEL_2 =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState != 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 && wci_wslv_cState != 3'd1 &&
	      wci_wslv_cState != 3'd3 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState != 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 && wci_wslv_cState != 3'd3 &&
	      wci_wslv_cState != 3'd2 &&
	      wci_wslv_cState != 3'd1 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd4 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd5 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd6 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd7) ;
  assign MUX_wci_wslv_respF_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ;
  assign MUX_wci_wslv_respF_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ;
  assign MUX_wrt8$write_1__SEL_1 =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h28 ;
  assign MUX_lcd_ctrl$setLine1_1__VAL_1 =
	     { r14[7:0],
	       r14[15:8],
	       r14[23:16],
	       r14[31:24],
	       r10[7:0],
	       r10[15:8],
	       r10[23:16],
	       r10[31:24],
	       rC[7:0],
	       rC[15:8],
	       rC[23:16],
	       rC[31:24],
	       r8[7:0],
	       r8[15:8],
	       r8[23:16],
	       r8[31:24] } ;
  assign MUX_lcd_ctrl$setLine2_1__VAL_1 =
	     { r28[7:0],
	       r28[15:8],
	       r28[23:16],
	       r28[31:24],
	       r24[7:0],
	       r24[15:8],
	       r24[23:16],
	       r24[31:24],
	       r20[7:0],
	       r20[15:8],
	       r20[23:16],
	       r20[31:24],
	       r1C[7:0],
	       r1C[15:8],
	       r1C[23:16],
	       r1C[31:24] } ;
  assign MUX_wci_wslv_illegalEdge$write_1__VAL_2 =
	     wci_wslv_reqF$D_OUT[36:34] != 3'd4 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd5 &&
	     wci_wslv_reqF$D_OUT[36:34] != 3'd6 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_1 = wci_wslv_respF_c_r + 2'd1 ;
  assign MUX_wci_wslv_respF_c_r$write_1__VAL_2 = wci_wslv_respF_c_r - 2'd1 ;
  always@(WILL_FIRE_RL_wci_wslv_ctl_op_complete or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_wci_cfrd or
	  MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 or WILL_FIRE_RL_wci_cfwr)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_wci_wslv_ctl_op_complete:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_wci_cfrd:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
	      MUX_wci_wslv_respF_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_wci_cfwr:
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 = 34'h1C0DE4201;
      default: MUX_wci_wslv_respF_q_0$write_1__VAL_1 =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_wci_wslv_respF_q_0$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd1) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       wci_wslv_respF_q_1 ;
  assign MUX_wci_wslv_respF_q_1$write_1__VAL_2 =
	     (wci_wslv_respF_c_r == 2'd2) ?
	       MUX_wci_wslv_respF_q_0$write_1__VAL_1 :
	       34'h0AAAAAAAA ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_1 =
	     wci_wslv_illegalEdge ? 34'h3C0DE4202 : 34'h1C0DE4201 ;
  assign MUX_wci_wslv_respF_x_wire$wset_1__VAL_2 =
	     { 2'd1, _theResult____h10579 } ;

  // inlined wires
  assign wci_wslv_wciReq$wget =
	     { wciS0_MCmd,
	       wciS0_MAddrSpace,
	       wciS0_MByteEn,
	       wciS0_MAddr,
	       wciS0_MData } ;
  assign wci_wslv_respF_x_wire$whas =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete || WILL_FIRE_RL_wci_cfrd ||
	     WILL_FIRE_RL_wci_cfwr ;
  assign wci_wslv_ctlAckReg_1$whas =
	     WILL_FIRE_RL_wci_ctrl_OrE || WILL_FIRE_RL_wci_ctrl_IsO ||
	     WILL_FIRE_RL_wci_ctrl_EiI ;
  assign wci_wslv_reqF_r_deq$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;
  assign wci_wslv_respF_enqueueing$whas =
	     WILL_FIRE_RL_wci_cfrd || WILL_FIRE_RL_wci_cfwr ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_wci_cfwr_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd1 ;
  assign wci_wslv_wci_cfrd_pw$whas =
	     wci_wslv_reqF$EMPTY_N && wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;
  assign wci_wslv_wci_ctrl_pw$whas =
	     wci_wslv_reqF$EMPTY_N && !wci_wslv_reqF$D_OUT[68] &&
	     wci_wslv_reqF$D_OUT[71:69] == 3'd2 ;

  // register b18
  assign b18$D_IN = 8'h0 ;
  assign b18$EN = 1'b0 ;

  // register b19
  assign b19$D_IN = 8'h0 ;
  assign b19$EN = 1'b0 ;

  // register b1A
  assign b1A$D_IN = 8'h0 ;
  assign b1A$EN = 1'b0 ;

  // register b1B
  assign b1B$D_IN = 8'h0 ;
  assign b1B$EN = 1'b0 ;

  // register needs_init
  assign needs_init$D_IN = 1'd0 ;
  assign needs_init$EN = needs_init ;

  // register r0
  assign r0$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r0$EN = WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0 ;

  // register r10
  assign r10$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r10$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h10 ;

  // register r14
  assign r14$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r14$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h14 ;

  // register r1C
  assign r1C$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r1C$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h1C ;

  // register r20
  assign r20$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r20$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h20 ;

  // register r24
  assign r24$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r24$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h24 ;

  // register r28
  assign r28$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r28$EN = MUX_wrt8$write_1__SEL_1 ;

  // register r4
  assign r4$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r4$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h04 ;

  // register r8
  assign r8$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign r8$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h08 ;

  // register rC
  assign rC$D_IN = wci_wslv_reqF$D_OUT[31:0] ;
  assign rC$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h0C ;

  // register sFlagState
  assign sFlagState$D_IN = 1'b0 ;
  assign sFlagState$EN = 1'b0 ;

  // register wci_wslv_cEdge
  assign wci_wslv_cEdge$D_IN = wci_wslv_reqF$D_OUT[36:34] ;
  assign wci_wslv_cEdge$EN = WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_cState
  assign wci_wslv_cState$D_IN = wci_wslv_nState ;
  assign wci_wslv_cState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge ;

  // register wci_wslv_ctlAckReg
  assign wci_wslv_ctlAckReg$D_IN = wci_wslv_ctlAckReg_1$whas ;
  assign wci_wslv_ctlAckReg$EN = 1'd1 ;

  // register wci_wslv_ctlOpActive
  assign wci_wslv_ctlOpActive$D_IN = !WILL_FIRE_RL_wci_wslv_ctl_op_complete ;
  assign wci_wslv_ctlOpActive$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete ||
	     WILL_FIRE_RL_wci_wslv_ctl_op_start ;

  // register wci_wslv_illegalEdge
  assign wci_wslv_illegalEdge$D_IN =
	     !MUX_wci_wslv_illegalEdge$write_1__SEL_1 &&
	     MUX_wci_wslv_illegalEdge$write_1__VAL_2 ;
  assign wci_wslv_illegalEdge$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge ||
	     MUX_wci_wslv_illegalEdge$write_1__SEL_2 ;

  // register wci_wslv_isReset_isInReset
  assign wci_wslv_isReset_isInReset$D_IN = 1'd0 ;
  assign wci_wslv_isReset_isInReset$EN = wci_wslv_isReset_isInReset ;

  // register wci_wslv_nState
  always@(wci_wslv_reqF$D_OUT)
  begin
    case (wci_wslv_reqF$D_OUT[36:34])
      3'd0: wci_wslv_nState$D_IN = 3'd1;
      3'd1: wci_wslv_nState$D_IN = 3'd2;
      3'd2: wci_wslv_nState$D_IN = 3'd3;
      default: wci_wslv_nState$D_IN = 3'd0;
    endcase
  end
  assign wci_wslv_nState$EN =
	     WILL_FIRE_RL_wci_wslv_ctl_op_start &&
	     (wci_wslv_reqF$D_OUT[36:34] == 3'd0 && wci_wslv_cState == 3'd0 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd1 &&
	      (wci_wslv_cState == 3'd1 || wci_wslv_cState == 3'd3) ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd2 && wci_wslv_cState == 3'd2 ||
	      wci_wslv_reqF$D_OUT[36:34] == 3'd3 &&
	      (wci_wslv_cState == 3'd3 || wci_wslv_cState == 3'd2 ||
	       wci_wslv_cState == 3'd1)) ;

  // register wci_wslv_reqF_countReg
  assign wci_wslv_reqF_countReg$D_IN =
	     (wci_wslv_wciReq$wget[71:69] != 3'd0) ?
	       wci_wslv_reqF_countReg + 2'd1 :
	       wci_wslv_reqF_countReg - 2'd1 ;
  assign wci_wslv_reqF_countReg$EN =
	     CAN_FIRE_RL_wci_wslv_reqF__updateLevelCounter ;

  // register wci_wslv_respF_c_r
  assign wci_wslv_respF_c_r$D_IN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ?
	       MUX_wci_wslv_respF_c_r$write_1__VAL_1 :
	       MUX_wci_wslv_respF_c_r$write_1__VAL_2 ;
  assign wci_wslv_respF_c_r$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_0
  always@(MUX_wci_wslv_respF_q_0$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr or wci_wslv_respF_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_0$write_1__SEL_1:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_0$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_0$D_IN = wci_wslv_respF_q_1;
      default: wci_wslv_respF_q_0$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_0$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd0 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_respF_q_1
  always@(MUX_wci_wslv_respF_q_1$write_1__SEL_1 or
	  MUX_wci_wslv_respF_q_0$write_1__VAL_1 or
	  WILL_FIRE_RL_wci_wslv_respF_both or
	  MUX_wci_wslv_respF_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wci_wslv_respF_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wci_wslv_respF_q_1$write_1__SEL_1:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_0$write_1__VAL_1;
      WILL_FIRE_RL_wci_wslv_respF_both:
	  wci_wslv_respF_q_1$D_IN = MUX_wci_wslv_respF_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wci_wslv_respF_decCtr:
	  wci_wslv_respF_q_1$D_IN = 34'h0AAAAAAAA;
      default: wci_wslv_respF_q_1$D_IN =
		   34'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wci_wslv_respF_q_1$EN =
	     WILL_FIRE_RL_wci_wslv_respF_incCtr &&
	     wci_wslv_respF_c_r == 2'd1 ||
	     WILL_FIRE_RL_wci_wslv_respF_both ||
	     WILL_FIRE_RL_wci_wslv_respF_decCtr ;

  // register wci_wslv_sFlagReg
  assign wci_wslv_sFlagReg$D_IN = sFlagState ;
  assign wci_wslv_sFlagReg$EN = 1'd1 ;

  // register wci_wslv_sThreadBusy_d
  assign wci_wslv_sThreadBusy_d$D_IN = 1'b0 ;
  assign wci_wslv_sThreadBusy_d$EN = 1'd1 ;

  // register wrt8
  assign wrt8$D_IN = MUX_wrt8$write_1__SEL_1 ;
  assign wrt8$EN =
	     WILL_FIRE_RL_wci_cfwr && wci_wslv_reqF$D_OUT[39:32] == 8'h28 ||
	     wrt8 ;

  // submodule lcd_ctrl
  assign lcd_ctrl$setLine1_text =
	     wrt8 ?
	       MUX_lcd_ctrl$setLine1_1__VAL_1 :
	       128'h2E2E2E2E676E697A696C616974696E49 ;
  assign lcd_ctrl$setLine2_text =
	     wrt8 ?
	       MUX_lcd_ctrl$setLine2_1__VAL_1 :
	       128'h2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E2E ;
  assign lcd_ctrl$EN_setLine1 = wrt8 || needs_init ;
  assign lcd_ctrl$EN_setLine2 = wrt8 || needs_init ;

  // submodule wci_wslv_reqF
  assign wci_wslv_reqF$D_IN = wci_wslv_wciReq$wget ;
  assign wci_wslv_reqF$ENQ = CAN_FIRE_RL_wci_wslv_reqF_enq ;
  assign wci_wslv_reqF$DEQ = wci_wslv_reqF_r_deq$whas ;
  assign wci_wslv_reqF$CLR = 1'b0 ;

  // remaining internal signals
  assign _theResult_____2__h10673 =
	     wci_wslv_reqF$D_OUT[66] ?
	       myBytes__h10744 :
	       _theResult_____3__h10672 ;
  assign _theResult_____3__h10672 =
	     wci_wslv_reqF$D_OUT[65] ?
	       myBytes__h10785 :
	       _theResult____h10671 ;
  assign _theResult____h10671 =
	     wci_wslv_reqF$D_OUT[64] ? myBytes___1__h10826 : 32'd0 ;
  assign myBytes___1__h10826 = { 24'd0, b18 } ;
  assign myBytes__h10703 = _theResult_____2__h10673 | y__h10715 ;
  assign myBytes__h10744 = _theResult_____3__h10672 | y__h10756 ;
  assign myBytes__h10785 = _theResult____h10671 | y__h10797 ;
  assign rdat__h10674 =
	     wci_wslv_reqF$D_OUT[67] ?
	       myBytes__h10703 :
	       _theResult_____2__h10673 ;
  assign rdat__h10906 = { 31'd0, sFlagState } ;
  assign y__h10715 = { b1B, 24'd0 } ;
  assign y__h10756 = { 8'd0, b1A, 16'd0 } ;
  assign y__h10797 = { 16'd0, b19, 8'd0 } ;
  always@(wci_wslv_reqF$D_OUT or r0 or r4 or rdat__h10674 or rdat__h10906)
  begin
    case (wci_wslv_reqF$D_OUT[39:32])
      8'h0: _theResult____h10579 = r0;
      8'h04: _theResult____h10579 = r4;
      8'h18: _theResult____h10579 = rdat__h10674;
      8'h20: _theResult____h10579 = rdat__h10906;
      default: _theResult____h10579 = 32'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge wciS0_Clk)
  begin
    if (!wciS0_MReset_n)
      begin
        b18 <= `BSV_ASSIGNMENT_DELAY 8'h18;
	b19 <= `BSV_ASSIGNMENT_DELAY 8'h19;
	b1A <= `BSV_ASSIGNMENT_DELAY 8'h1A;
	b1B <= `BSV_ASSIGNMENT_DELAY 8'h1B;
	needs_init <= `BSV_ASSIGNMENT_DELAY 1'd1;
	r0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r1C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	r8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sFlagState <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY 3'h2;
	wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY 34'h0AAAAAAAA;
	wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wrt8 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (b18$EN) b18 <= `BSV_ASSIGNMENT_DELAY b18$D_IN;
	if (b19$EN) b19 <= `BSV_ASSIGNMENT_DELAY b19$D_IN;
	if (b1A$EN) b1A <= `BSV_ASSIGNMENT_DELAY b1A$D_IN;
	if (b1B$EN) b1B <= `BSV_ASSIGNMENT_DELAY b1B$D_IN;
	if (needs_init$EN)
	  needs_init <= `BSV_ASSIGNMENT_DELAY needs_init$D_IN;
	if (r0$EN) r0 <= `BSV_ASSIGNMENT_DELAY r0$D_IN;
	if (r10$EN) r10 <= `BSV_ASSIGNMENT_DELAY r10$D_IN;
	if (r14$EN) r14 <= `BSV_ASSIGNMENT_DELAY r14$D_IN;
	if (r1C$EN) r1C <= `BSV_ASSIGNMENT_DELAY r1C$D_IN;
	if (r20$EN) r20 <= `BSV_ASSIGNMENT_DELAY r20$D_IN;
	if (r24$EN) r24 <= `BSV_ASSIGNMENT_DELAY r24$D_IN;
	if (r28$EN) r28 <= `BSV_ASSIGNMENT_DELAY r28$D_IN;
	if (r4$EN) r4 <= `BSV_ASSIGNMENT_DELAY r4$D_IN;
	if (r8$EN) r8 <= `BSV_ASSIGNMENT_DELAY r8$D_IN;
	if (rC$EN) rC <= `BSV_ASSIGNMENT_DELAY rC$D_IN;
	if (sFlagState$EN)
	  sFlagState <= `BSV_ASSIGNMENT_DELAY sFlagState$D_IN;
	if (wci_wslv_cEdge$EN)
	  wci_wslv_cEdge <= `BSV_ASSIGNMENT_DELAY wci_wslv_cEdge$D_IN;
	if (wci_wslv_cState$EN)
	  wci_wslv_cState <= `BSV_ASSIGNMENT_DELAY wci_wslv_cState$D_IN;
	if (wci_wslv_ctlAckReg$EN)
	  wci_wslv_ctlAckReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_ctlAckReg$D_IN;
	if (wci_wslv_ctlOpActive$EN)
	  wci_wslv_ctlOpActive <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_ctlOpActive$D_IN;
	if (wci_wslv_illegalEdge$EN)
	  wci_wslv_illegalEdge <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_illegalEdge$D_IN;
	if (wci_wslv_nState$EN)
	  wci_wslv_nState <= `BSV_ASSIGNMENT_DELAY wci_wslv_nState$D_IN;
	if (wci_wslv_reqF_countReg$EN)
	  wci_wslv_reqF_countReg <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_reqF_countReg$D_IN;
	if (wci_wslv_respF_c_r$EN)
	  wci_wslv_respF_c_r <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_c_r$D_IN;
	if (wci_wslv_respF_q_0$EN)
	  wci_wslv_respF_q_0 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_0$D_IN;
	if (wci_wslv_respF_q_1$EN)
	  wci_wslv_respF_q_1 <= `BSV_ASSIGNMENT_DELAY wci_wslv_respF_q_1$D_IN;
	if (wci_wslv_sFlagReg$EN)
	  wci_wslv_sFlagReg <= `BSV_ASSIGNMENT_DELAY wci_wslv_sFlagReg$D_IN;
	if (wci_wslv_sThreadBusy_d$EN)
	  wci_wslv_sThreadBusy_d <= `BSV_ASSIGNMENT_DELAY
	      wci_wslv_sThreadBusy_d$D_IN;
	if (wrt8$EN) wrt8 <= `BSV_ASSIGNMENT_DELAY wrt8$D_IN;
      end
  end

  always@(posedge wciS0_Clk or negedge wciS0_MReset_n)
  if (!wciS0_MReset_n)
    begin
      wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (wci_wslv_isReset_isInReset$EN)
	wci_wslv_isReset_isInReset <= `BSV_ASSIGNMENT_DELAY
	    wci_wslv_isReset_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    b18 = 8'hAA;
    b19 = 8'hAA;
    b1A = 8'hAA;
    b1B = 8'hAA;
    needs_init = 1'h0;
    r0 = 32'hAAAAAAAA;
    r10 = 32'hAAAAAAAA;
    r14 = 32'hAAAAAAAA;
    r1C = 32'hAAAAAAAA;
    r20 = 32'hAAAAAAAA;
    r24 = 32'hAAAAAAAA;
    r28 = 32'hAAAAAAAA;
    r4 = 32'hAAAAAAAA;
    r8 = 32'hAAAAAAAA;
    rC = 32'hAAAAAAAA;
    sFlagState = 1'h0;
    wci_wslv_cEdge = 3'h2;
    wci_wslv_cState = 3'h2;
    wci_wslv_ctlAckReg = 1'h0;
    wci_wslv_ctlOpActive = 1'h0;
    wci_wslv_illegalEdge = 1'h0;
    wci_wslv_isReset_isInReset = 1'h0;
    wci_wslv_nState = 3'h2;
    wci_wslv_reqF_countReg = 2'h2;
    wci_wslv_respF_c_r = 2'h2;
    wci_wslv_respF_q_0 = 34'h2AAAAAAAA;
    wci_wslv_respF_q_1 = 34'h2AAAAAAAA;
    wci_wslv_sFlagReg = 1'h0;
    wci_wslv_sThreadBusy_d = 1'h0;
    wrt8 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge wciS0_Clk)
  begin
    #0;
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	begin
	  v__h10442 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr)
	$display("[%0d]: %m: WCI CONFIG WRITE Addr:%0x BE:%0x Data:%0x",
		 v__h10442,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 wci_wslv_reqF$D_OUT[31:0]);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	begin
	  v__h10595 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd)
	$display("[%0d]: %m: WCI CONFIG READ Addr:%0x BE:%0x Data:%0x",
		 v__h10595,
		 wci_wslv_reqF$D_OUT[63:32],
		 wci_wslv_reqF$D_OUT[67:64],
		 _theResult____h10579);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	begin
	  v__h3621 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_start)
	$display("[%0d]: %m: WCI ControlOp: Starting-transition edge:%x from:%x",
		 v__h3621,
		 wci_wslv_reqF$D_OUT[36:34],
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"LCDWorker.bsv\", line 53, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"LCDWorker.bsv\", line 53, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"LCDWorker.bsv\", line 53, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfwr && WILL_FIRE_RL_wci_cfrd)
	$display("Error: \"LCDWorker.bsv\", line 53, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfwr] and [RL_wci_cfrd] )\n  fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"LCDWorker.bsv\", line 53, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"LCDWorker.bsv\", line 53, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_cfrd && WILL_FIRE_RL_wci_ctrl_EiI)
	$display("Error: \"LCDWorker.bsv\", line 53, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_cfrd] and\n  [RL_wci_ctrl_EiI] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"LCDWorker.bsv\", line 53, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_EiI && WILL_FIRE_RL_wci_ctrl_IsO)
	$display("Error: \"LCDWorker.bsv\", line 53, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_EiI] and\n  [RL_wci_ctrl_IsO] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_ctrl_IsO && WILL_FIRE_RL_wci_ctrl_OrE)
	$display("Error: \"LCDWorker.bsv\", line 53, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_wci_ctrl_IsO] and\n  [RL_wci_ctrl_OrE] ) fired in the same clock cycle.\n");
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	begin
	  v__h3939 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: ILLEGAL-EDGE Completed-transition edge:%x from:%x",
		 v__h3939,
		 wci_wslv_cEdge,
		 wci_wslv_cState);
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	begin
	  v__h3795 = $time;
	  #0;
	end
    if (wciS0_MReset_n)
      if (WILL_FIRE_RL_wci_wslv_ctl_op_complete && !wci_wslv_illegalEdge)
	$display("[%0d]: %m: WCI ControlOp: Completed-transition edge:%x from:%x to:%x",
		 v__h3795,
		 wci_wslv_cEdge,
		 wci_wslv_cState,
		 wci_wslv_nState);
  end
  // synopsys translate_on
endmodule  // mkLCDWorker

