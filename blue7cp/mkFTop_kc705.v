//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Mon Sep 24 14:51:06 EDT 2012
//
// Method conflict info:
// Method: gmii_rx_rxd
// Conflict-free: gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: gmii_tx_tx_en
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: gmii_tx_tx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: gmii_col
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_db
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_e
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_rs
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
// Method: lcd_rw
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led,
// 	       lcd_db,
// 	       lcd_e,
// 	       lcd_rs,
// 	       lcd_rw
//
//
// Ports:
// Name                         I/O  size props
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// lcd_db                         O     4
// lcd_e                          O     1
// lcd_rs                         O     1
// lcd_rw                         O     1 const
// rxclkBnd                       O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// gmii_tx_tx_clk                 O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// gmii_rstn                      O     1 reset
// sys0_clkp                      I     1 clock
// sys0_clkn                      I     1 clock
// sys0_rstn                      I     1 reset
// sys1_clkp                      I     1 clock
// sys1_clkn                      I     1 clock
// gmii_rx_clk                    I     1 clock
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop_kc705(sys0_clkp,
		    sys0_clkn,
		    sys0_rstn,
		    sys1_clkp,
		    sys1_clkn,
		    gmii_rx_clk,

		    .mdio_mdd(gbe$mdio_mdd),
		    .mdio_mdc(gbe$mdio_mdc),

		    gmii_rx_rxd_i,

		    gmii_rx_rx_dv_i,

		    gmii_rx_rx_er_i,

		    gmii_tx_txd,

		    gmii_tx_tx_en,

		    gmii_tx_tx_er,

		    gmii_col_i,

		    gmii_crs_i,

		    gmii_intr_i,

		    gmii_led,

		    lcd_db,

		    lcd_e,

		    lcd_rs,

		    lcd_rw,

		    rxclkBnd,
		    CLK_GATE_rxclkBnd,

		    gmii_tx_tx_clk,
		    CLK_GATE_gmii_tx_tx_clk,

		    gmii_rstn);
  input  sys0_clkp;
  input  sys0_clkn;
  input  sys0_rstn;
  input  sys1_clkp;
  input  sys1_clkn;
  input  gmii_rx_clk;

  inout  gbe$mdio_mdd;
  inout  gbe$mdio_mdc;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // value method lcd_db
  output [3 : 0] lcd_db;

  // value method lcd_e
  output lcd_e;

  // value method lcd_rs
  output lcd_rs;

  // value method lcd_rw
  output lcd_rw;

  // oscillator and gates for output clock rxclkBnd
  output rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // oscillator and gates for output clock gmii_tx_tx_clk
  output gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // output resets
  output gmii_rstn;

  // signals for module outputs
  wire [7 : 0] gmii_tx_txd;
  wire [3 : 0] lcd_db;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       gmii_led,
       gmii_rstn,
       gmii_tx_tx_clk,
       gmii_tx_tx_en,
       gmii_tx_tx_er,
       lcd_e,
       lcd_rs,
       lcd_rw,
       rxclkBnd;

  // register idc_doResetCount
  reg [3 : 0] idc_doResetCount;
  wire [3 : 0] idc_doResetCount$D_IN;
  wire idc_doResetCount$EN;

  // register idc_preResetCount
  reg [3 : 0] idc_preResetCount;
  wire [3 : 0] idc_preResetCount$D_IN;
  wire idc_preResetCount$EN;

  // ports of submodule cp
  wire [511 : 0] cp$uuid_arg;
  wire [58 : 0] cp$server_request_put;
  wire [39 : 0] cp$server_response_get;
  wire [31 : 0] cp$wci_Vm_0_SData,
		cp$wci_Vm_10_SData,
		cp$wci_Vm_11_SData,
		cp$wci_Vm_12_SData,
		cp$wci_Vm_13_SData,
		cp$wci_Vm_14_SData,
		cp$wci_Vm_1_MAddr,
		cp$wci_Vm_1_MData,
		cp$wci_Vm_1_SData,
		cp$wci_Vm_2_SData,
		cp$wci_Vm_3_SData,
		cp$wci_Vm_4_SData,
		cp$wci_Vm_5_SData,
		cp$wci_Vm_6_SData,
		cp$wci_Vm_7_SData,
		cp$wci_Vm_8_SData,
		cp$wci_Vm_9_SData;
  wire [3 : 0] cp$wci_Vm_1_MByteEn;
  wire [2 : 0] cp$switch_x, cp$wci_Vm_1_MCmd;
  wire [1 : 0] cp$wci_Vm_0_SFlag,
	       cp$wci_Vm_0_SResp,
	       cp$wci_Vm_10_SFlag,
	       cp$wci_Vm_10_SResp,
	       cp$wci_Vm_11_SFlag,
	       cp$wci_Vm_11_SResp,
	       cp$wci_Vm_12_SFlag,
	       cp$wci_Vm_12_SResp,
	       cp$wci_Vm_13_SFlag,
	       cp$wci_Vm_13_SResp,
	       cp$wci_Vm_14_SFlag,
	       cp$wci_Vm_14_SResp,
	       cp$wci_Vm_1_MFlag,
	       cp$wci_Vm_1_SFlag,
	       cp$wci_Vm_1_SResp,
	       cp$wci_Vm_2_SFlag,
	       cp$wci_Vm_2_SResp,
	       cp$wci_Vm_3_SFlag,
	       cp$wci_Vm_3_SResp,
	       cp$wci_Vm_4_SFlag,
	       cp$wci_Vm_4_SResp,
	       cp$wci_Vm_5_SFlag,
	       cp$wci_Vm_5_SResp,
	       cp$wci_Vm_6_SFlag,
	       cp$wci_Vm_6_SResp,
	       cp$wci_Vm_7_SFlag,
	       cp$wci_Vm_7_SResp,
	       cp$wci_Vm_8_SFlag,
	       cp$wci_Vm_8_SResp,
	       cp$wci_Vm_9_SFlag,
	       cp$wci_Vm_9_SResp;
  wire cp$EN_server_request_put,
       cp$EN_server_response_get,
       cp$RDY_server_request_put,
       cp$RDY_server_response_get,
       cp$RST_N_wci_Vm_1,
       cp$gps_ppsSyncIn_x,
       cp$wci_Vm_0_SThreadBusy,
       cp$wci_Vm_10_SThreadBusy,
       cp$wci_Vm_11_SThreadBusy,
       cp$wci_Vm_12_SThreadBusy,
       cp$wci_Vm_13_SThreadBusy,
       cp$wci_Vm_14_SThreadBusy,
       cp$wci_Vm_1_MAddrSpace,
       cp$wci_Vm_1_SThreadBusy,
       cp$wci_Vm_2_SThreadBusy,
       cp$wci_Vm_3_SThreadBusy,
       cp$wci_Vm_4_SThreadBusy,
       cp$wci_Vm_5_SThreadBusy,
       cp$wci_Vm_6_SThreadBusy,
       cp$wci_Vm_7_SThreadBusy,
       cp$wci_Vm_8_SThreadBusy,
       cp$wci_Vm_9_SThreadBusy;

  // ports of submodule edcp
  wire [58 : 0] edcp$client_request_get;
  wire [47 : 0] edcp$macAddr_u;
  wire [39 : 0] edcp$client_response_put,
		edcp$server_request_put,
		edcp$server_response_get;
  wire edcp$EN_client_request_get,
       edcp$EN_client_response_put,
       edcp$EN_macAddr,
       edcp$EN_server_request_put,
       edcp$EN_server_response_get,
       edcp$RDY_client_request_get,
       edcp$RDY_client_response_put,
       edcp$RDY_server_request_put,
       edcp$RDY_server_response_get;

  // ports of submodule gbe
  wire [39 : 0] gbe$client_request_get, gbe$client_response_put;
  wire [7 : 0] gbe$gmii_rx_rxd_i, gbe$gmii_tx_txd;
  wire gbe$CLK_gmii_tx_tx_clk,
       gbe$CLK_rxclkBnd,
       gbe$EN_client_request_get,
       gbe$EN_client_response_put,
       gbe$RDY_client_request_get,
       gbe$RDY_client_response_put,
       gbe$gmii_col_i,
       gbe$gmii_crs_i,
       gbe$gmii_intr_i,
       gbe$gmii_led,
       gbe$gmii_rx_rx_dv_i,
       gbe$gmii_rx_rx_er_i,
       gbe$gmii_tx_tx_en,
       gbe$gmii_tx_tx_er,
       gbe$mdio_mdc,
       gbe$mdio_mdd;

  // ports of submodule idc_idcRst
  wire idc_idcRst$ASSERT_IN, idc_idcRst$OUT_RST_N;

  // ports of submodule idc_resetP
  wire idc_resetP$RESET_OUT;

  // ports of submodule lcdWrk
  wire [31 : 0] lcdWrk$wciS0_MAddr, lcdWrk$wciS0_MData, lcdWrk$wciS0_SData;
  wire [3 : 0] lcdWrk$lcd_db, lcdWrk$wciS0_MByteEn;
  wire [2 : 0] lcdWrk$wciS0_MCmd;
  wire [1 : 0] lcdWrk$wciS0_MFlag, lcdWrk$wciS0_SFlag, lcdWrk$wciS0_SResp;
  wire lcdWrk$lcd_e,
       lcdWrk$lcd_rs,
       lcdWrk$lcd_rw,
       lcdWrk$wciS0_MAddrSpace,
       lcdWrk$wciS0_SThreadBusy;

  // ports of submodule sys0_clk
  wire sys0_clk$O;

  // ports of submodule sys0_rst
  wire sys0_rst$OUT_RST_N;

  // ports of submodule sys1_clk
  wire sys1_clk$O;

  // ports of submodule sys1_clki
  wire sys1_clki$O;

  // ports of submodule sys1_rst
  wire sys1_rst$OUT_RST_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_hardMac,
       CAN_FIRE_RL_idc_do_reset,
       CAN_FIRE_RL_idc_my_reset_condition,
       CAN_FIRE_RL_idc_pre_reset,
       CAN_FIRE_RL_mAddrConnect,
       CAN_FIRE_RL_mAddrSConnect,
       CAN_FIRE_RL_mBEConnect,
       CAN_FIRE_RL_mCmdConnect,
       CAN_FIRE_RL_mDataConnect,
       CAN_FIRE_RL_mFlagConnect,
       CAN_FIRE_RL_sDataConnect,
       CAN_FIRE_RL_sFlagConnect,
       CAN_FIRE_RL_sRespConnect,
       CAN_FIRE_RL_stbConnect,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_hardMac,
       WILL_FIRE_RL_idc_do_reset,
       WILL_FIRE_RL_idc_my_reset_condition,
       WILL_FIRE_RL_idc_pre_reset,
       WILL_FIRE_RL_mAddrConnect,
       WILL_FIRE_RL_mAddrSConnect,
       WILL_FIRE_RL_mBEConnect,
       WILL_FIRE_RL_mCmdConnect,
       WILL_FIRE_RL_mDataConnect,
       WILL_FIRE_RL_mFlagConnect,
       WILL_FIRE_RL_sDataConnect,
       WILL_FIRE_RL_sFlagConnect,
       WILL_FIRE_RL_sRespConnect,
       WILL_FIRE_RL_stbConnect,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd;

  // remaining internal signals
  reg [1 : 0] CASE_edcpserver_response_get_BITS_19_TO_18_3__ETC__q7,
	      CASE_edcpserver_response_get_BITS_29_TO_28_3__ETC__q6,
	      CASE_edcpserver_response_get_BITS_39_TO_38_3__ETC__q5,
	      CASE_edcpserver_response_get_BITS_9_TO_8_3_0__ETC__q8,
	      CASE_gbeclient_request_get_BITS_19_TO_18_3_0__ETC__q3,
	      CASE_gbeclient_request_get_BITS_29_TO_28_3_0__ETC__q2,
	      CASE_gbeclient_request_get_BITS_39_TO_38_3_0__ETC__q1,
	      CASE_gbeclient_request_get_BITS_9_TO_8_3_0_gb_ETC__q4;

  // oscillator and gates for output clock rxclkBnd
  assign rxclkBnd = gbe$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // oscillator and gates for output clock gmii_tx_tx_clk
  assign gmii_tx_tx_clk = gbe$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // output resets
  assign gmii_rstn = sys1_rst$OUT_RST_N ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gbe$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gbe$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gbe$gmii_tx_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = gbe$gmii_led ;

  // value method lcd_db
  assign lcd_db = lcdWrk$lcd_db ;

  // value method lcd_e
  assign lcd_e = lcdWrk$lcd_e ;

  // value method lcd_rs
  assign lcd_rs = lcdWrk$lcd_rs ;

  // value method lcd_rw
  assign lcd_rw = lcdWrk$lcd_rw ;

  // submodule cp
  mkOCCP cp(.pciDevice(16'hAAAA),
	    .CLK_time_clk(sys0_clk$O),
	    .RST_N_time_rst(sys0_rst$OUT_RST_N),
	    .CLK(sys0_clk$O),
	    .RST_N(sys0_rst$OUT_RST_N),
	    .gps_ppsSyncIn_x(cp$gps_ppsSyncIn_x),
	    .server_request_put(cp$server_request_put),
	    .switch_x(cp$switch_x),
	    .uuid_arg(cp$uuid_arg),
	    .wci_Vm_0_SData(cp$wci_Vm_0_SData),
	    .wci_Vm_0_SFlag(cp$wci_Vm_0_SFlag),
	    .wci_Vm_0_SResp(cp$wci_Vm_0_SResp),
	    .wci_Vm_10_SData(cp$wci_Vm_10_SData),
	    .wci_Vm_10_SFlag(cp$wci_Vm_10_SFlag),
	    .wci_Vm_10_SResp(cp$wci_Vm_10_SResp),
	    .wci_Vm_11_SData(cp$wci_Vm_11_SData),
	    .wci_Vm_11_SFlag(cp$wci_Vm_11_SFlag),
	    .wci_Vm_11_SResp(cp$wci_Vm_11_SResp),
	    .wci_Vm_12_SData(cp$wci_Vm_12_SData),
	    .wci_Vm_12_SFlag(cp$wci_Vm_12_SFlag),
	    .wci_Vm_12_SResp(cp$wci_Vm_12_SResp),
	    .wci_Vm_13_SData(cp$wci_Vm_13_SData),
	    .wci_Vm_13_SFlag(cp$wci_Vm_13_SFlag),
	    .wci_Vm_13_SResp(cp$wci_Vm_13_SResp),
	    .wci_Vm_14_SData(cp$wci_Vm_14_SData),
	    .wci_Vm_14_SFlag(cp$wci_Vm_14_SFlag),
	    .wci_Vm_14_SResp(cp$wci_Vm_14_SResp),
	    .wci_Vm_1_SData(cp$wci_Vm_1_SData),
	    .wci_Vm_1_SFlag(cp$wci_Vm_1_SFlag),
	    .wci_Vm_1_SResp(cp$wci_Vm_1_SResp),
	    .wci_Vm_2_SData(cp$wci_Vm_2_SData),
	    .wci_Vm_2_SFlag(cp$wci_Vm_2_SFlag),
	    .wci_Vm_2_SResp(cp$wci_Vm_2_SResp),
	    .wci_Vm_3_SData(cp$wci_Vm_3_SData),
	    .wci_Vm_3_SFlag(cp$wci_Vm_3_SFlag),
	    .wci_Vm_3_SResp(cp$wci_Vm_3_SResp),
	    .wci_Vm_4_SData(cp$wci_Vm_4_SData),
	    .wci_Vm_4_SFlag(cp$wci_Vm_4_SFlag),
	    .wci_Vm_4_SResp(cp$wci_Vm_4_SResp),
	    .wci_Vm_5_SData(cp$wci_Vm_5_SData),
	    .wci_Vm_5_SFlag(cp$wci_Vm_5_SFlag),
	    .wci_Vm_5_SResp(cp$wci_Vm_5_SResp),
	    .wci_Vm_6_SData(cp$wci_Vm_6_SData),
	    .wci_Vm_6_SFlag(cp$wci_Vm_6_SFlag),
	    .wci_Vm_6_SResp(cp$wci_Vm_6_SResp),
	    .wci_Vm_7_SData(cp$wci_Vm_7_SData),
	    .wci_Vm_7_SFlag(cp$wci_Vm_7_SFlag),
	    .wci_Vm_7_SResp(cp$wci_Vm_7_SResp),
	    .wci_Vm_8_SData(cp$wci_Vm_8_SData),
	    .wci_Vm_8_SFlag(cp$wci_Vm_8_SFlag),
	    .wci_Vm_8_SResp(cp$wci_Vm_8_SResp),
	    .wci_Vm_9_SData(cp$wci_Vm_9_SData),
	    .wci_Vm_9_SFlag(cp$wci_Vm_9_SFlag),
	    .wci_Vm_9_SResp(cp$wci_Vm_9_SResp),
	    .EN_server_request_put(cp$EN_server_request_put),
	    .EN_server_response_get(cp$EN_server_response_get),
	    .wci_Vm_0_SThreadBusy(cp$wci_Vm_0_SThreadBusy),
	    .wci_Vm_1_SThreadBusy(cp$wci_Vm_1_SThreadBusy),
	    .wci_Vm_2_SThreadBusy(cp$wci_Vm_2_SThreadBusy),
	    .wci_Vm_3_SThreadBusy(cp$wci_Vm_3_SThreadBusy),
	    .wci_Vm_4_SThreadBusy(cp$wci_Vm_4_SThreadBusy),
	    .wci_Vm_5_SThreadBusy(cp$wci_Vm_5_SThreadBusy),
	    .wci_Vm_6_SThreadBusy(cp$wci_Vm_6_SThreadBusy),
	    .wci_Vm_7_SThreadBusy(cp$wci_Vm_7_SThreadBusy),
	    .wci_Vm_8_SThreadBusy(cp$wci_Vm_8_SThreadBusy),
	    .wci_Vm_9_SThreadBusy(cp$wci_Vm_9_SThreadBusy),
	    .wci_Vm_10_SThreadBusy(cp$wci_Vm_10_SThreadBusy),
	    .wci_Vm_11_SThreadBusy(cp$wci_Vm_11_SThreadBusy),
	    .wci_Vm_12_SThreadBusy(cp$wci_Vm_12_SThreadBusy),
	    .wci_Vm_13_SThreadBusy(cp$wci_Vm_13_SThreadBusy),
	    .wci_Vm_14_SThreadBusy(cp$wci_Vm_14_SThreadBusy),
	    .RDY_server_request_put(cp$RDY_server_request_put),
	    .server_response_get(cp$server_response_get),
	    .RDY_server_response_get(cp$RDY_server_response_get),
	    .wci_Vm_0_MCmd(),
	    .wci_Vm_0_MAddrSpace(),
	    .wci_Vm_0_MByteEn(),
	    .wci_Vm_0_MAddr(),
	    .wci_Vm_0_MData(),
	    .wci_Vm_0_MFlag(),
	    .wci_Vm_1_MCmd(cp$wci_Vm_1_MCmd),
	    .wci_Vm_1_MAddrSpace(cp$wci_Vm_1_MAddrSpace),
	    .wci_Vm_1_MByteEn(cp$wci_Vm_1_MByteEn),
	    .wci_Vm_1_MAddr(cp$wci_Vm_1_MAddr),
	    .wci_Vm_1_MData(cp$wci_Vm_1_MData),
	    .wci_Vm_1_MFlag(cp$wci_Vm_1_MFlag),
	    .wci_Vm_2_MCmd(),
	    .wci_Vm_2_MAddrSpace(),
	    .wci_Vm_2_MByteEn(),
	    .wci_Vm_2_MAddr(),
	    .wci_Vm_2_MData(),
	    .wci_Vm_2_MFlag(),
	    .wci_Vm_3_MCmd(),
	    .wci_Vm_3_MAddrSpace(),
	    .wci_Vm_3_MByteEn(),
	    .wci_Vm_3_MAddr(),
	    .wci_Vm_3_MData(),
	    .wci_Vm_3_MFlag(),
	    .wci_Vm_4_MCmd(),
	    .wci_Vm_4_MAddrSpace(),
	    .wci_Vm_4_MByteEn(),
	    .wci_Vm_4_MAddr(),
	    .wci_Vm_4_MData(),
	    .wci_Vm_4_MFlag(),
	    .wci_Vm_5_MCmd(),
	    .wci_Vm_5_MAddrSpace(),
	    .wci_Vm_5_MByteEn(),
	    .wci_Vm_5_MAddr(),
	    .wci_Vm_5_MData(),
	    .wci_Vm_5_MFlag(),
	    .wci_Vm_6_MCmd(),
	    .wci_Vm_6_MAddrSpace(),
	    .wci_Vm_6_MByteEn(),
	    .wci_Vm_6_MAddr(),
	    .wci_Vm_6_MData(),
	    .wci_Vm_6_MFlag(),
	    .wci_Vm_7_MCmd(),
	    .wci_Vm_7_MAddrSpace(),
	    .wci_Vm_7_MByteEn(),
	    .wci_Vm_7_MAddr(),
	    .wci_Vm_7_MData(),
	    .wci_Vm_7_MFlag(),
	    .wci_Vm_8_MCmd(),
	    .wci_Vm_8_MAddrSpace(),
	    .wci_Vm_8_MByteEn(),
	    .wci_Vm_8_MAddr(),
	    .wci_Vm_8_MData(),
	    .wci_Vm_8_MFlag(),
	    .wci_Vm_9_MCmd(),
	    .wci_Vm_9_MAddrSpace(),
	    .wci_Vm_9_MByteEn(),
	    .wci_Vm_9_MAddr(),
	    .wci_Vm_9_MData(),
	    .wci_Vm_9_MFlag(),
	    .wci_Vm_10_MCmd(),
	    .wci_Vm_10_MAddrSpace(),
	    .wci_Vm_10_MByteEn(),
	    .wci_Vm_10_MAddr(),
	    .wci_Vm_10_MData(),
	    .wci_Vm_10_MFlag(),
	    .wci_Vm_11_MCmd(),
	    .wci_Vm_11_MAddrSpace(),
	    .wci_Vm_11_MByteEn(),
	    .wci_Vm_11_MAddr(),
	    .wci_Vm_11_MData(),
	    .wci_Vm_11_MFlag(),
	    .wci_Vm_12_MCmd(),
	    .wci_Vm_12_MAddrSpace(),
	    .wci_Vm_12_MByteEn(),
	    .wci_Vm_12_MAddr(),
	    .wci_Vm_12_MData(),
	    .wci_Vm_12_MFlag(),
	    .wci_Vm_13_MCmd(),
	    .wci_Vm_13_MAddrSpace(),
	    .wci_Vm_13_MByteEn(),
	    .wci_Vm_13_MAddr(),
	    .wci_Vm_13_MData(),
	    .wci_Vm_13_MFlag(),
	    .wci_Vm_14_MCmd(),
	    .wci_Vm_14_MAddrSpace(),
	    .wci_Vm_14_MByteEn(),
	    .wci_Vm_14_MAddr(),
	    .wci_Vm_14_MData(),
	    .wci_Vm_14_MFlag(),
	    .cpNow(),
	    .RDY_cpNow(),
	    .gps_ppsSyncOut(),
	    .led(),
	    .RST_N_wci_Vm_0(),
	    .RST_N_wci_Vm_1(cp$RST_N_wci_Vm_1),
	    .RST_N_wci_Vm_2(),
	    .RST_N_wci_Vm_3(),
	    .RST_N_wci_Vm_4(),
	    .RST_N_wci_Vm_5(),
	    .RST_N_wci_Vm_6(),
	    .RST_N_wci_Vm_7(),
	    .RST_N_wci_Vm_8(),
	    .RST_N_wci_Vm_9(),
	    .RST_N_wci_Vm_10(),
	    .RST_N_wci_Vm_11(),
	    .RST_N_wci_Vm_12(),
	    .RST_N_wci_Vm_13(),
	    .RST_N_wci_Vm_14());

  // submodule edcp
  mkEDCPAdapter edcp(.CLK(sys0_clk$O),
		     .RST_N(sys0_rst$OUT_RST_N),
		     .client_response_put(edcp$client_response_put),
		     .macAddr_u(edcp$macAddr_u),
		     .server_request_put(edcp$server_request_put),
		     .EN_server_request_put(edcp$EN_server_request_put),
		     .EN_server_response_get(edcp$EN_server_response_get),
		     .EN_client_request_get(edcp$EN_client_request_get),
		     .EN_client_response_put(edcp$EN_client_response_put),
		     .EN_macAddr(edcp$EN_macAddr),
		     .RDY_server_request_put(edcp$RDY_server_request_put),
		     .server_response_get(edcp$server_response_get),
		     .RDY_server_response_get(edcp$RDY_server_response_get),
		     .client_request_get(edcp$client_request_get),
		     .RDY_client_request_get(edcp$RDY_client_request_get),
		     .RDY_client_response_put(edcp$RDY_client_response_put),
		     .RDY_macAddr());

  // submodule gbe
  mkGbeQABS #(.hasDebugLogic(1'd0)) gbe(.CLK_gmii_rx_clk(gmii_rx_clk),
					.CLK_gmiixo_clk(sys1_clk$O),
					.RST_N_gmiixo_rst(sys1_rst$OUT_RST_N),
					.CLK(sys0_clk$O),
					.RST_N(sys0_rst$OUT_RST_N),
					.client_response_put(gbe$client_response_put),
					.gmii_col_i(gbe$gmii_col_i),
					.gmii_crs_i(gbe$gmii_crs_i),
					.gmii_intr_i(gbe$gmii_intr_i),
					.gmii_rx_rx_dv_i(gbe$gmii_rx_rx_dv_i),
					.gmii_rx_rx_er_i(gbe$gmii_rx_rx_er_i),
					.gmii_rx_rxd_i(gbe$gmii_rx_rxd_i),
					.EN_client_request_get(gbe$EN_client_request_get),
					.EN_client_response_put(gbe$EN_client_response_put),
					.client_request_get(gbe$client_request_get),
					.RDY_client_request_get(gbe$RDY_client_request_get),
					.RDY_client_response_put(gbe$RDY_client_response_put),
					.gmii_tx_txd(gbe$gmii_tx_txd),
					.gmii_tx_tx_en(gbe$gmii_tx_tx_en),
					.gmii_tx_tx_er(gbe$gmii_tx_tx_er),
					.gmii_led(gbe$gmii_led),
					.CLK_gmii_tx_tx_clk(gbe$CLK_gmii_tx_tx_clk),
					.CLK_GATE_gmii_tx_tx_clk(),
					.CLK_rxclkBnd(gbe$CLK_rxclkBnd),
					.CLK_GATE_rxclkBnd(),
					.RST_N_gmii_rstn(),
					.mdio_mdd(gbe$mdio_mdd),
					.mdio_mdc(gbe$mdio_mdc));

  // submodule idc
  IDELAYCTRL idc(.REFCLK(sys0_clk$O), .RST(idc_resetP$RESET_OUT), .RDY());

  // submodule idc_idcRst
  MakeResetA #(.RSTDELAY(32'd1), .init(1'd0)) idc_idcRst(.CLK(sys0_clk$O),
							 .RST_N(sys0_rst$OUT_RST_N),
							 .DST_CLK(sys0_clk$O),
							 .ASSERT_IN(idc_idcRst$ASSERT_IN),
							 .ASSERT_OUT(),
							 .OUT_RST_N(idc_idcRst$OUT_RST_N));

  // submodule idc_resetP
  ResetInverter idc_resetP(.RESET_IN(idc_idcRst$OUT_RST_N),
			   .RESET_OUT(idc_resetP$RESET_OUT));

  // submodule lcdWrk
  mkLCDWorker #(.hasDebugLogic(1'd0)) lcdWrk(.wciS0_Clk(sys0_clk$O),
					     .wciS0_MReset_n(cp$RST_N_wci_Vm_1),
					     .wciS0_MAddr(lcdWrk$wciS0_MAddr),
					     .wciS0_MAddrSpace(lcdWrk$wciS0_MAddrSpace),
					     .wciS0_MByteEn(lcdWrk$wciS0_MByteEn),
					     .wciS0_MCmd(lcdWrk$wciS0_MCmd),
					     .wciS0_MData(lcdWrk$wciS0_MData),
					     .wciS0_MFlag(lcdWrk$wciS0_MFlag),
					     .wciS0_SResp(lcdWrk$wciS0_SResp),
					     .wciS0_SData(lcdWrk$wciS0_SData),
					     .wciS0_SThreadBusy(lcdWrk$wciS0_SThreadBusy),
					     .wciS0_SFlag(lcdWrk$wciS0_SFlag),
					     .lcd_db(lcdWrk$lcd_db),
					     .lcd_e(lcdWrk$lcd_e),
					     .lcd_rs(lcdWrk$lcd_rs),
					     .lcd_rw(lcdWrk$lcd_rw));

  // submodule sys0_clk
  IBUFDS sys0_clk(.I(sys0_clkp), .IB(sys0_clkn), .O(sys0_clk$O));

  // submodule sys0_rst
  SyncResetA #(.RSTDELAY(32'd15)) sys0_rst(.CLK(sys0_clk$O),
					   .IN_RST_N(sys0_rstn),
					   .OUT_RST_N(sys0_rst$OUT_RST_N));

  // submodule sys1_clk
  BUFG sys1_clk(.I(sys1_clki$O), .O(sys1_clk$O));

  // submodule sys1_clki
  IBUFDS_GTE2 sys1_clki(.I(sys1_clkp),
			.IB(sys1_clkn),
			.CEB(1'd0),
			.O(sys1_clki$O),
			.ODIV2());

  // submodule sys1_rst
  SyncResetA #(.RSTDELAY(32'd0)) sys1_rst(.CLK(sys1_clk$O),
					  .IN_RST_N(sys0_rst$OUT_RST_N),
					  .OUT_RST_N(sys1_rst$OUT_RST_N));

  // rule RL_hardMac
  assign CAN_FIRE_RL_hardMac = 1'd1 ;
  assign WILL_FIRE_RL_hardMac = 1'd1 ;

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     edcp$RDY_server_request_put && gbe$RDY_client_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     edcp$RDY_server_response_get && gbe$RDY_client_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     cp$RDY_server_request_put && edcp$RDY_client_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     cp$RDY_server_response_get && edcp$RDY_client_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_mCmdConnect
  assign CAN_FIRE_RL_mCmdConnect = 1'd1 ;
  assign WILL_FIRE_RL_mCmdConnect = 1'd1 ;

  // rule RL_mAddrSConnect
  assign CAN_FIRE_RL_mAddrSConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrSConnect = 1'd1 ;

  // rule RL_mBEConnect
  assign CAN_FIRE_RL_mBEConnect = 1'd1 ;
  assign WILL_FIRE_RL_mBEConnect = 1'd1 ;

  // rule RL_mAddrConnect
  assign CAN_FIRE_RL_mAddrConnect = 1'd1 ;
  assign WILL_FIRE_RL_mAddrConnect = 1'd1 ;

  // rule RL_mDataConnect
  assign CAN_FIRE_RL_mDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_mDataConnect = 1'd1 ;

  // rule RL_sRespConnect
  assign CAN_FIRE_RL_sRespConnect = 1'd1 ;
  assign WILL_FIRE_RL_sRespConnect = 1'd1 ;

  // rule RL_sDataConnect
  assign CAN_FIRE_RL_sDataConnect = 1'd1 ;
  assign WILL_FIRE_RL_sDataConnect = 1'd1 ;

  // rule RL_stbConnect
  assign CAN_FIRE_RL_stbConnect = lcdWrk$wciS0_SThreadBusy ;
  assign WILL_FIRE_RL_stbConnect = lcdWrk$wciS0_SThreadBusy ;

  // rule RL_sFlagConnect
  assign CAN_FIRE_RL_sFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_sFlagConnect = 1'd1 ;

  // rule RL_mFlagConnect
  assign CAN_FIRE_RL_mFlagConnect = 1'd1 ;
  assign WILL_FIRE_RL_mFlagConnect = 1'd1 ;

  // rule RL_idc_my_reset_condition
  assign CAN_FIRE_RL_idc_my_reset_condition =
	     idc_preResetCount == 4'hF && idc_doResetCount != 4'hF ;
  assign WILL_FIRE_RL_idc_my_reset_condition =
	     CAN_FIRE_RL_idc_my_reset_condition ;

  // rule RL_idc_do_reset
  assign CAN_FIRE_RL_idc_do_reset = idc_preResetCount == 4'hF ;
  assign WILL_FIRE_RL_idc_do_reset = CAN_FIRE_RL_idc_do_reset ;

  // rule RL_idc_pre_reset
  assign CAN_FIRE_RL_idc_pre_reset = 1'd1 ;
  assign WILL_FIRE_RL_idc_pre_reset = 1'd1 ;

  // register idc_doResetCount
  assign idc_doResetCount$D_IN =
	     (idc_doResetCount == 4'hF) ?
	       idc_doResetCount :
	       idc_doResetCount + 4'd1 ;
  assign idc_doResetCount$EN = CAN_FIRE_RL_idc_do_reset ;

  // register idc_preResetCount
  assign idc_preResetCount$D_IN =
	     (idc_preResetCount == 4'hF) ?
	       idc_preResetCount :
	       idc_preResetCount + 4'd1 ;
  assign idc_preResetCount$EN = 1'd1 ;

  // submodule cp
  assign cp$gps_ppsSyncIn_x = 1'b0 ;
  assign cp$server_request_put = edcp$client_request_get ;
  assign cp$switch_x = 3'h0 ;
  assign cp$uuid_arg = 512'h0 ;
  assign cp$wci_Vm_0_SData = 32'h0 ;
  assign cp$wci_Vm_0_SFlag = 2'h0 ;
  assign cp$wci_Vm_0_SResp = 2'h0 ;
  assign cp$wci_Vm_10_SData = 32'h0 ;
  assign cp$wci_Vm_10_SFlag = 2'h0 ;
  assign cp$wci_Vm_10_SResp = 2'h0 ;
  assign cp$wci_Vm_11_SData = 32'h0 ;
  assign cp$wci_Vm_11_SFlag = 2'h0 ;
  assign cp$wci_Vm_11_SResp = 2'h0 ;
  assign cp$wci_Vm_12_SData = 32'h0 ;
  assign cp$wci_Vm_12_SFlag = 2'h0 ;
  assign cp$wci_Vm_12_SResp = 2'h0 ;
  assign cp$wci_Vm_13_SData = 32'h0 ;
  assign cp$wci_Vm_13_SFlag = 2'h0 ;
  assign cp$wci_Vm_13_SResp = 2'h0 ;
  assign cp$wci_Vm_14_SData = 32'h0 ;
  assign cp$wci_Vm_14_SFlag = 2'h0 ;
  assign cp$wci_Vm_14_SResp = 2'h0 ;
  assign cp$wci_Vm_1_SData = lcdWrk$wciS0_SData ;
  assign cp$wci_Vm_1_SFlag = lcdWrk$wciS0_SFlag ;
  assign cp$wci_Vm_1_SResp = lcdWrk$wciS0_SResp ;
  assign cp$wci_Vm_2_SData = 32'h0 ;
  assign cp$wci_Vm_2_SFlag = 2'h0 ;
  assign cp$wci_Vm_2_SResp = 2'h0 ;
  assign cp$wci_Vm_3_SData = 32'h0 ;
  assign cp$wci_Vm_3_SFlag = 2'h0 ;
  assign cp$wci_Vm_3_SResp = 2'h0 ;
  assign cp$wci_Vm_4_SData = 32'h0 ;
  assign cp$wci_Vm_4_SFlag = 2'h0 ;
  assign cp$wci_Vm_4_SResp = 2'h0 ;
  assign cp$wci_Vm_5_SData = 32'h0 ;
  assign cp$wci_Vm_5_SFlag = 2'h0 ;
  assign cp$wci_Vm_5_SResp = 2'h0 ;
  assign cp$wci_Vm_6_SData = 32'h0 ;
  assign cp$wci_Vm_6_SFlag = 2'h0 ;
  assign cp$wci_Vm_6_SResp = 2'h0 ;
  assign cp$wci_Vm_7_SData = 32'h0 ;
  assign cp$wci_Vm_7_SFlag = 2'h0 ;
  assign cp$wci_Vm_7_SResp = 2'h0 ;
  assign cp$wci_Vm_8_SData = 32'h0 ;
  assign cp$wci_Vm_8_SFlag = 2'h0 ;
  assign cp$wci_Vm_8_SResp = 2'h0 ;
  assign cp$wci_Vm_9_SData = 32'h0 ;
  assign cp$wci_Vm_9_SFlag = 2'h0 ;
  assign cp$wci_Vm_9_SResp = 2'h0 ;
  assign cp$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign cp$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign cp$wci_Vm_0_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_1_SThreadBusy = lcdWrk$wciS0_SThreadBusy ;
  assign cp$wci_Vm_2_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_3_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_4_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_5_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_6_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_7_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_8_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_9_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_10_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_11_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_12_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_13_SThreadBusy = 1'b0 ;
  assign cp$wci_Vm_14_SThreadBusy = 1'b0 ;

  // submodule edcp
  assign edcp$client_response_put = cp$server_response_get ;
  assign edcp$macAddr_u = 48'h000A350276B3 ;
  assign edcp$server_request_put =
	     { CASE_gbeclient_request_get_BITS_39_TO_38_3_0__ETC__q1,
	       gbe$client_request_get[37:30],
	       CASE_gbeclient_request_get_BITS_29_TO_28_3_0__ETC__q2,
	       gbe$client_request_get[27:20],
	       CASE_gbeclient_request_get_BITS_19_TO_18_3_0__ETC__q3,
	       gbe$client_request_get[17:10],
	       CASE_gbeclient_request_get_BITS_9_TO_8_3_0_gb_ETC__q4,
	       gbe$client_request_get[7:0] } ;
  assign edcp$EN_server_request_put = CAN_FIRE_RL_ClientServerRequest ;
  assign edcp$EN_server_response_get = CAN_FIRE_RL_ClientServerResponse ;
  assign edcp$EN_client_request_get = CAN_FIRE_RL_ClientServerRequest_1 ;
  assign edcp$EN_client_response_put = CAN_FIRE_RL_ClientServerResponse_1 ;
  assign edcp$EN_macAddr = 1'd1 ;

  // submodule gbe
  assign gbe$client_response_put =
	     { CASE_edcpserver_response_get_BITS_39_TO_38_3__ETC__q5,
	       edcp$server_response_get[37:30],
	       CASE_edcpserver_response_get_BITS_29_TO_28_3__ETC__q6,
	       edcp$server_response_get[27:20],
	       CASE_edcpserver_response_get_BITS_19_TO_18_3__ETC__q7,
	       edcp$server_response_get[17:10],
	       CASE_edcpserver_response_get_BITS_9_TO_8_3_0__ETC__q8,
	       edcp$server_response_get[7:0] } ;
  assign gbe$gmii_col_i = gmii_col_i ;
  assign gbe$gmii_crs_i = gmii_crs_i ;
  assign gbe$gmii_intr_i = gmii_intr_i ;
  assign gbe$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gbe$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gbe$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gbe$EN_client_request_get = CAN_FIRE_RL_ClientServerRequest ;
  assign gbe$EN_client_response_put = CAN_FIRE_RL_ClientServerResponse ;

  // submodule idc_idcRst
  assign idc_idcRst$ASSERT_IN = CAN_FIRE_RL_idc_my_reset_condition ;

  // submodule lcdWrk
  assign lcdWrk$wciS0_MAddr = cp$wci_Vm_1_MAddr ;
  assign lcdWrk$wciS0_MAddrSpace = cp$wci_Vm_1_MAddrSpace ;
  assign lcdWrk$wciS0_MByteEn = cp$wci_Vm_1_MByteEn ;
  assign lcdWrk$wciS0_MCmd = cp$wci_Vm_1_MCmd ;
  assign lcdWrk$wciS0_MData = cp$wci_Vm_1_MData ;
  assign lcdWrk$wciS0_MFlag = cp$wci_Vm_1_MFlag ;

  // remaining internal signals
  always@(gbe$client_request_get)
  begin
    case (gbe$client_request_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_gbeclient_request_get_BITS_39_TO_38_3_0__ETC__q1 =
	      gbe$client_request_get[39:38];
      2'd3: CASE_gbeclient_request_get_BITS_39_TO_38_3_0__ETC__q1 = 2'd3;
    endcase
  end
  always@(gbe$client_request_get)
  begin
    case (gbe$client_request_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_gbeclient_request_get_BITS_29_TO_28_3_0__ETC__q2 =
	      gbe$client_request_get[29:28];
      2'd3: CASE_gbeclient_request_get_BITS_29_TO_28_3_0__ETC__q2 = 2'd3;
    endcase
  end
  always@(gbe$client_request_get)
  begin
    case (gbe$client_request_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_gbeclient_request_get_BITS_19_TO_18_3_0__ETC__q3 =
	      gbe$client_request_get[19:18];
      2'd3: CASE_gbeclient_request_get_BITS_19_TO_18_3_0__ETC__q3 = 2'd3;
    endcase
  end
  always@(gbe$client_request_get)
  begin
    case (gbe$client_request_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gbeclient_request_get_BITS_9_TO_8_3_0_gb_ETC__q4 =
	      gbe$client_request_get[9:8];
      2'd3: CASE_gbeclient_request_get_BITS_9_TO_8_3_0_gb_ETC__q4 = 2'd3;
    endcase
  end
  always@(edcp$server_response_get)
  begin
    case (edcp$server_response_get[39:38])
      2'd0, 2'd1, 2'd2:
	  CASE_edcpserver_response_get_BITS_39_TO_38_3__ETC__q5 =
	      edcp$server_response_get[39:38];
      2'd3: CASE_edcpserver_response_get_BITS_39_TO_38_3__ETC__q5 = 2'd3;
    endcase
  end
  always@(edcp$server_response_get)
  begin
    case (edcp$server_response_get[29:28])
      2'd0, 2'd1, 2'd2:
	  CASE_edcpserver_response_get_BITS_29_TO_28_3__ETC__q6 =
	      edcp$server_response_get[29:28];
      2'd3: CASE_edcpserver_response_get_BITS_29_TO_28_3__ETC__q6 = 2'd3;
    endcase
  end
  always@(edcp$server_response_get)
  begin
    case (edcp$server_response_get[19:18])
      2'd0, 2'd1, 2'd2:
	  CASE_edcpserver_response_get_BITS_19_TO_18_3__ETC__q7 =
	      edcp$server_response_get[19:18];
      2'd3: CASE_edcpserver_response_get_BITS_19_TO_18_3__ETC__q7 = 2'd3;
    endcase
  end
  always@(edcp$server_response_get)
  begin
    case (edcp$server_response_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_edcpserver_response_get_BITS_9_TO_8_3_0__ETC__q8 =
	      edcp$server_response_get[9:8];
      2'd3: CASE_edcpserver_response_get_BITS_9_TO_8_3_0__ETC__q8 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge sys0_clk$O)
  begin
    if (!sys0_rst$OUT_RST_N)
      begin
        idc_doResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	idc_preResetCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (idc_doResetCount$EN)
	  idc_doResetCount <= `BSV_ASSIGNMENT_DELAY idc_doResetCount$D_IN;
	if (idc_preResetCount$EN)
	  idc_preResetCount <= `BSV_ASSIGNMENT_DELAY idc_preResetCount$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    idc_doResetCount = 4'hA;
    idc_preResetCount = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop_kc705

