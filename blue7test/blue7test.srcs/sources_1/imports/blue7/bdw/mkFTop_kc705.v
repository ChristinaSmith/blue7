//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Wed Sep 12 15:23:33 EDT 2012
//
// Method conflict info:
// Method: gmii_rx_rxd
// Conflict-free: gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rxd
//
// Method: gmii_rx_rx_dv
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_dv
//
// Method: gmii_rx_rx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Sequenced before (restricted): gmii_rx_rx_er
//
// Method: gmii_tx_txd
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_en
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_tx_tx_er
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
// Method: gmii_col
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_col
//
// Method: gmii_crs
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_intr,
// 	       gmii_led
// Conflicts: gmii_crs
//
// Method: gmii_intr
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_led
// Conflicts: gmii_intr
//
// Method: gmii_led
// Conflict-free: gmii_rx_rxd,
// 	       gmii_rx_rx_dv,
// 	       gmii_rx_rx_er,
// 	       gmii_tx_txd,
// 	       gmii_tx_tx_en,
// 	       gmii_tx_tx_er,
// 	       gmii_col,
// 	       gmii_crs,
// 	       gmii_intr,
// 	       gmii_led
//
//
// Ports:
// Name                         I/O  size props
// gmii_tx_txd                    O     8
// gmii_tx_tx_en                  O     1
// gmii_tx_tx_er                  O     1
// gmii_led                       O     1 reg
// CLK_rxclkBnd                   O     1 clock
// CLK_GATE_rxclkBnd              O     1 const
// CLK_gmii_tx_tx_clk             O     1 clock
// CLK_GATE_gmii_tx_tx_clk        O     1 const
// CLK_rxClk                      I     1 clock
// CLK_txClk                      I     1 clock
// CLK                            I     1 clock
// RST_N                          I     1 reset
// gmii_rx_rxd_i                  I     8 reg
// gmii_rx_rx_dv_i                I     1 reg
// gmii_rx_rx_er_i                I     1 reg
// gmii_col_i                     I     1
// gmii_crs_i                     I     1
// gmii_intr_i                    I     1
// mdio_mdd                      IO     1 inout
// mdio_mdc                      IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFTop_kc705(CLK_rxClk,
		    CLK_txClk,
		    CLK,
		    RST_N,

		    .mdio_mdd(mdi_tMDD$IO),
		    .mdio_mdc(mdi_tMDC$IO),

		    gmii_rx_rxd_i,

		    gmii_rx_rx_dv_i,

		    gmii_rx_rx_er_i,

		    gmii_tx_txd,

		    gmii_tx_tx_en,

		    gmii_tx_tx_er,

		    gmii_col_i,

		    gmii_crs_i,

		    gmii_intr_i,

		    gmii_led,

		    CLK_rxclkBnd,
		    CLK_GATE_rxclkBnd,

		    CLK_gmii_tx_tx_clk,
		    CLK_GATE_gmii_tx_tx_clk);
  input  CLK_rxClk;
  input  CLK_txClk;
  input  CLK;
  input  RST_N;

  inout  mdi_tMDD$IO;
  inout  mdi_tMDC$IO;

  // action method gmii_rx_rxd
  input  [7 : 0] gmii_rx_rxd_i;

  // action method gmii_rx_rx_dv
  input  gmii_rx_rx_dv_i;

  // action method gmii_rx_rx_er
  input  gmii_rx_rx_er_i;

  // value method gmii_tx_txd
  output [7 : 0] gmii_tx_txd;

  // value method gmii_tx_tx_en
  output gmii_tx_tx_en;

  // value method gmii_tx_tx_er
  output gmii_tx_tx_er;

  // action method gmii_col
  input  gmii_col_i;

  // action method gmii_crs
  input  gmii_crs_i;

  // action method gmii_intr
  input  gmii_intr_i;

  // value method gmii_led
  output gmii_led;

  // oscillator and gates for output clock CLK_rxclkBnd
  output CLK_rxclkBnd;
  output CLK_GATE_rxclkBnd;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  output CLK_gmii_tx_tx_clk;
  output CLK_GATE_gmii_tx_tx_clk;

  // signals for module outputs
  wire [7 : 0] gmii_tx_txd;
  wire CLK_GATE_gmii_tx_tx_clk,
       CLK_GATE_rxclkBnd,
       CLK_gmii_tx_tx_clk,
       CLK_rxclkBnd,
       gmii_led,
       gmii_tx_tx_en,
       gmii_tx_tx_er;

  // register mdi_rMDC
  reg mdi_rMDC;
  wire mdi_rMDC$D_IN, mdi_rMDC$EN;

  // register mdi_rMDD
  reg mdi_rMDD;
  wire mdi_rMDD$D_IN, mdi_rMDD$EN;

  // register mdi_rOutEn
  reg mdi_rOutEn;
  wire mdi_rOutEn$D_IN, mdi_rOutEn$EN;

  // register mdi_rPhyAddr
  reg [4 : 0] mdi_rPhyAddr;
  wire [4 : 0] mdi_rPhyAddr$D_IN;
  wire mdi_rPhyAddr$EN;

  // register mdi_rRegAddr
  reg [4 : 0] mdi_rRegAddr;
  wire [4 : 0] mdi_rRegAddr$D_IN;
  wire mdi_rRegAddr$EN;

  // register mdi_rState
  reg mdi_rState;
  wire mdi_rState$D_IN, mdi_rState$EN;

  // register mdi_rWrite
  reg mdi_rWrite;
  wire mdi_rWrite$D_IN, mdi_rWrite$EN;

  // register mdi_rWriteData
  reg [15 : 0] mdi_rWriteData;
  wire [15 : 0] mdi_rWriteData$D_IN;
  wire mdi_rWriteData$EN;

  // register mdi_vrReadData
  reg mdi_vrReadData;
  wire mdi_vrReadData$D_IN, mdi_vrReadData$EN;

  // register mdi_vrReadData_1
  reg mdi_vrReadData_1;
  wire mdi_vrReadData_1$D_IN, mdi_vrReadData_1$EN;

  // register mdi_vrReadData_10
  reg mdi_vrReadData_10;
  wire mdi_vrReadData_10$D_IN, mdi_vrReadData_10$EN;

  // register mdi_vrReadData_11
  reg mdi_vrReadData_11;
  wire mdi_vrReadData_11$D_IN, mdi_vrReadData_11$EN;

  // register mdi_vrReadData_12
  reg mdi_vrReadData_12;
  wire mdi_vrReadData_12$D_IN, mdi_vrReadData_12$EN;

  // register mdi_vrReadData_13
  reg mdi_vrReadData_13;
  wire mdi_vrReadData_13$D_IN, mdi_vrReadData_13$EN;

  // register mdi_vrReadData_14
  reg mdi_vrReadData_14;
  wire mdi_vrReadData_14$D_IN, mdi_vrReadData_14$EN;

  // register mdi_vrReadData_15
  reg mdi_vrReadData_15;
  wire mdi_vrReadData_15$D_IN, mdi_vrReadData_15$EN;

  // register mdi_vrReadData_2
  reg mdi_vrReadData_2;
  wire mdi_vrReadData_2$D_IN, mdi_vrReadData_2$EN;

  // register mdi_vrReadData_3
  reg mdi_vrReadData_3;
  wire mdi_vrReadData_3$D_IN, mdi_vrReadData_3$EN;

  // register mdi_vrReadData_4
  reg mdi_vrReadData_4;
  wire mdi_vrReadData_4$D_IN, mdi_vrReadData_4$EN;

  // register mdi_vrReadData_5
  reg mdi_vrReadData_5;
  wire mdi_vrReadData_5$D_IN, mdi_vrReadData_5$EN;

  // register mdi_vrReadData_6
  reg mdi_vrReadData_6;
  wire mdi_vrReadData_6$D_IN, mdi_vrReadData_6$EN;

  // register mdi_vrReadData_7
  reg mdi_vrReadData_7;
  wire mdi_vrReadData_7$D_IN, mdi_vrReadData_7$EN;

  // register mdi_vrReadData_8
  reg mdi_vrReadData_8;
  wire mdi_vrReadData_8$D_IN, mdi_vrReadData_8$EN;

  // register mdi_vrReadData_9
  reg mdi_vrReadData_9;
  wire mdi_vrReadData_9$D_IN, mdi_vrReadData_9$EN;

  // ports of submodule gmac
  wire [9 : 0] gmac$rx_get, gmac$tx_put;
  wire [7 : 0] gmac$gmii_rx_rxd_i, gmac$gmii_tx_txd;
  wire gmac$CLK_gmii_tx_tx_clk,
       gmac$CLK_rxclkBnd,
       gmac$EN_rxOperate,
       gmac$EN_rx_get,
       gmac$EN_txOperate,
       gmac$EN_tx_put,
       gmac$RDY_rx_get,
       gmac$RDY_tx_put,
       gmac$gmii_col_i,
       gmac$gmii_crs_i,
       gmac$gmii_intr_i,
       gmac$gmii_led,
       gmac$gmii_rx_rx_dv_i,
       gmac$gmii_rx_rx_er_i,
       gmac$gmii_tx_tx_en,
       gmac$gmii_tx_tx_er;

  // ports of submodule mdi_fRequest
  wire [26 : 0] mdi_fRequest$D_IN, mdi_fRequest$D_OUT;
  wire mdi_fRequest$CLR,
       mdi_fRequest$DEQ,
       mdi_fRequest$EMPTY_N,
       mdi_fRequest$ENQ;

  // ports of submodule mdi_fResponse
  wire [16 : 0] mdi_fResponse$D_IN;
  wire mdi_fResponse$CLR,
       mdi_fResponse$DEQ,
       mdi_fResponse$ENQ,
       mdi_fResponse$FULL_N;

  // ports of submodule mdi_rPlayIndex
  wire [7 : 0] mdi_rPlayIndex$DATA_A,
	       mdi_rPlayIndex$DATA_B,
	       mdi_rPlayIndex$DATA_C,
	       mdi_rPlayIndex$DATA_F,
	       mdi_rPlayIndex$Q_OUT;
  wire mdi_rPlayIndex$ADDA,
       mdi_rPlayIndex$ADDB,
       mdi_rPlayIndex$SETC,
       mdi_rPlayIndex$SETF;

  // ports of submodule mdi_rPrescaler
  wire [3 : 0] mdi_rPrescaler$DATA_A,
	       mdi_rPrescaler$DATA_B,
	       mdi_rPrescaler$DATA_C,
	       mdi_rPrescaler$DATA_F,
	       mdi_rPrescaler$Q_OUT;
  wire mdi_rPrescaler$ADDA,
       mdi_rPrescaler$ADDB,
       mdi_rPrescaler$SETC,
       mdi_rPrescaler$SETF;

  // ports of submodule mdi_tMDC
  wire mdi_tMDC$IO;

  // ports of submodule mdi_tMDD
  wire mdi_tMDD$IO, mdi_tMDD$O;

  // rule scheduling signals
  wire CAN_FIRE_RL_mdi_reset_prescaler,
       CAN_FIRE_RL_mdi_run_frame,
       CAN_FIRE_RL_mdi_start,
       CAN_FIRE_RL_mdi_update_prescaler,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_gmii_col,
       CAN_FIRE_gmii_crs,
       CAN_FIRE_gmii_intr,
       CAN_FIRE_gmii_rx_rx_dv,
       CAN_FIRE_gmii_rx_rx_er,
       CAN_FIRE_gmii_rx_rxd,
       WILL_FIRE_RL_mdi_reset_prescaler,
       WILL_FIRE_RL_mdi_run_frame,
       WILL_FIRE_RL_mdi_start,
       WILL_FIRE_RL_mdi_update_prescaler,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_gmii_col,
       WILL_FIRE_gmii_crs,
       WILL_FIRE_gmii_intr,
       WILL_FIRE_gmii_rx_rx_dv,
       WILL_FIRE_gmii_rx_rx_er,
       WILL_FIRE_gmii_rx_rxd;

  // inputs to muxes for submodule ports
  wire MUX_mdi_rState$write_1__SEL_1;

  // remaining internal signals
  reg [1 : 0] CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q1;
  wire [194 : 0] _1434766110945527031733894725304609466537681244_ETC__q2,
		 _643371375338640__q3,
		 bs__h14969,
		 bs__h2444;
  wire [15 : 0] x_data__h18167;
  wire [2 : 0] d0__h2070,
	       d10__h2060,
	       d11__h2059,
	       d12__h2058,
	       d13__h2057,
	       d14__h2056,
	       d15__h2055,
	       d1__h2069,
	       d2__h2068,
	       d3__h2067,
	       d4__h2066,
	       d5__h2065,
	       d6__h2064,
	       d7__h2063,
	       d8__h2062,
	       d9__h2061,
	       pa0__h2047,
	       pa1__h2046,
	       pa2__h2045,
	       pa3__h2044,
	       pa4__h2043,
	       ra0__h2053,
	       ra1__h2052,
	       ra2__h2051,
	       ra3__h2050,
	       ra4__h2049;

  // oscillator and gates for output clock CLK_rxclkBnd
  assign CLK_rxclkBnd = gmac$CLK_rxclkBnd ;
  assign CLK_GATE_rxclkBnd = 1'b1 ;

  // oscillator and gates for output clock CLK_gmii_tx_tx_clk
  assign CLK_gmii_tx_tx_clk = gmac$CLK_gmii_tx_tx_clk ;
  assign CLK_GATE_gmii_tx_tx_clk = 1'b1 ;

  // action method gmii_rx_rxd
  assign CAN_FIRE_gmii_rx_rxd = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rxd = 1'd1 ;

  // action method gmii_rx_rx_dv
  assign CAN_FIRE_gmii_rx_rx_dv = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_dv = 1'd1 ;

  // action method gmii_rx_rx_er
  assign CAN_FIRE_gmii_rx_rx_er = 1'd1 ;
  assign WILL_FIRE_gmii_rx_rx_er = 1'd1 ;

  // value method gmii_tx_txd
  assign gmii_tx_txd = gmac$gmii_tx_txd ;

  // value method gmii_tx_tx_en
  assign gmii_tx_tx_en = gmac$gmii_tx_tx_en ;

  // value method gmii_tx_tx_er
  assign gmii_tx_tx_er = gmac$gmii_tx_tx_er ;

  // action method gmii_col
  assign CAN_FIRE_gmii_col = 1'd1 ;
  assign WILL_FIRE_gmii_col = 1'd1 ;

  // action method gmii_crs
  assign CAN_FIRE_gmii_crs = 1'd1 ;
  assign WILL_FIRE_gmii_crs = 1'd1 ;

  // action method gmii_intr
  assign CAN_FIRE_gmii_intr = 1'd1 ;
  assign WILL_FIRE_gmii_intr = 1'd1 ;

  // value method gmii_led
  assign gmii_led = gmac$gmii_led ;

  // submodule gmac
  mkGMAC gmac(.CLK_rxClk(CLK_rxClk),
	      .CLK_txClk(CLK_txClk),
	      .CLK(CLK),
	      .RST_N(RST_N),
	      .gmii_col_i(gmac$gmii_col_i),
	      .gmii_crs_i(gmac$gmii_crs_i),
	      .gmii_intr_i(gmac$gmii_intr_i),
	      .gmii_rx_rx_dv_i(gmac$gmii_rx_rx_dv_i),
	      .gmii_rx_rx_er_i(gmac$gmii_rx_rx_er_i),
	      .gmii_rx_rxd_i(gmac$gmii_rx_rxd_i),
	      .tx_put(gmac$tx_put),
	      .EN_rx_get(gmac$EN_rx_get),
	      .EN_tx_put(gmac$EN_tx_put),
	      .EN_rxOperate(gmac$EN_rxOperate),
	      .EN_txOperate(gmac$EN_txOperate),
	      .gmii_tx_txd(gmac$gmii_tx_txd),
	      .gmii_tx_tx_en(gmac$gmii_tx_tx_en),
	      .gmii_tx_tx_er(gmac$gmii_tx_tx_er),
	      .gmii_led(gmac$gmii_led),
	      .rx_get(gmac$rx_get),
	      .RDY_rx_get(gmac$RDY_rx_get),
	      .RDY_tx_put(gmac$RDY_tx_put),
	      .RDY_rxOperate(),
	      .RDY_txOperate(),
	      .rxOverFlow(),
	      .RDY_rxOverFlow(),
	      .txUnderFlow(),
	      .RDY_txUnderFlow(),
	      .phyInterrupt(),
	      .RDY_phyInterrupt(),
	      .CLK_gmii_tx_tx_clk(gmac$CLK_gmii_tx_tx_clk),
	      .CLK_GATE_gmii_tx_tx_clk(),
	      .CLK_rxclkBnd(gmac$CLK_rxclkBnd),
	      .CLK_GATE_rxclkBnd());

  // submodule mdi_fRequest
  FIFO2 #(.width(32'd27), .guarded(32'd1)) mdi_fRequest(.RST_N(RST_N),
							.CLK(CLK),
							.D_IN(mdi_fRequest$D_IN),
							.ENQ(mdi_fRequest$ENQ),
							.DEQ(mdi_fRequest$DEQ),
							.CLR(mdi_fRequest$CLR),
							.D_OUT(mdi_fRequest$D_OUT),
							.FULL_N(),
							.EMPTY_N(mdi_fRequest$EMPTY_N));

  // submodule mdi_fResponse
  FIFO2 #(.width(32'd17), .guarded(32'd1)) mdi_fResponse(.RST_N(RST_N),
							 .CLK(CLK),
							 .D_IN(mdi_fResponse$D_IN),
							 .ENQ(mdi_fResponse$ENQ),
							 .DEQ(mdi_fResponse$DEQ),
							 .CLR(mdi_fResponse$CLR),
							 .D_OUT(),
							 .FULL_N(mdi_fResponse$FULL_N),
							 .EMPTY_N());

  // submodule mdi_rPlayIndex
  Counter #(.width(32'd8), .init(8'd0)) mdi_rPlayIndex(.CLK(CLK),
						       .RST_N(RST_N),
						       .DATA_A(mdi_rPlayIndex$DATA_A),
						       .DATA_B(mdi_rPlayIndex$DATA_B),
						       .DATA_C(mdi_rPlayIndex$DATA_C),
						       .DATA_F(mdi_rPlayIndex$DATA_F),
						       .ADDA(mdi_rPlayIndex$ADDA),
						       .ADDB(mdi_rPlayIndex$ADDB),
						       .SETC(mdi_rPlayIndex$SETC),
						       .SETF(mdi_rPlayIndex$SETF),
						       .Q_OUT(mdi_rPlayIndex$Q_OUT));

  // submodule mdi_rPrescaler
  Counter #(.width(32'd4), .init(4'd6)) mdi_rPrescaler(.CLK(CLK),
						       .RST_N(RST_N),
						       .DATA_A(mdi_rPrescaler$DATA_A),
						       .DATA_B(mdi_rPrescaler$DATA_B),
						       .DATA_C(mdi_rPrescaler$DATA_C),
						       .DATA_F(mdi_rPrescaler$DATA_F),
						       .ADDA(mdi_rPrescaler$ADDA),
						       .ADDB(mdi_rPrescaler$ADDB),
						       .SETC(mdi_rPrescaler$SETC),
						       .SETF(mdi_rPrescaler$SETF),
						       .Q_OUT(mdi_rPrescaler$Q_OUT));

  // submodule mdi_tMDC
  TriState #(.width(32'd1)) mdi_tMDC(.I(mdi_rMDC),
				     .OE(1'd1),
				     .O(),
				     .IO(mdi_tMDC$IO));

  // submodule mdi_tMDD
  TriState #(.width(32'd1)) mdi_tMDD(.I(mdi_rMDD),
				     .OE(mdi_rOutEn),
				     .O(mdi_tMDD$O),
				     .IO(mdi_tMDD$IO));

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut = gmac$RDY_tx_put && gmac$RDY_rx_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mdi_update_prescaler
  assign CAN_FIRE_RL_mdi_update_prescaler = mdi_rPrescaler$Q_OUT != 4'd0 ;
  assign WILL_FIRE_RL_mdi_update_prescaler =
	     CAN_FIRE_RL_mdi_update_prescaler ;

  // rule RL_mdi_reset_prescaler
  assign CAN_FIRE_RL_mdi_reset_prescaler = mdi_rPrescaler$Q_OUT == 4'd0 ;
  assign WILL_FIRE_RL_mdi_reset_prescaler = CAN_FIRE_RL_mdi_reset_prescaler ;

  // rule RL_mdi_start
  assign CAN_FIRE_RL_mdi_start = mdi_fRequest$EMPTY_N && !mdi_rState ;
  assign WILL_FIRE_RL_mdi_start = CAN_FIRE_RL_mdi_start ;

  // rule RL_mdi_run_frame
  assign CAN_FIRE_RL_mdi_run_frame =
	     mdi_fResponse$FULL_N && mdi_rState &&
	     mdi_rPrescaler$Q_OUT == 4'd0 ;
  assign WILL_FIRE_RL_mdi_run_frame = CAN_FIRE_RL_mdi_run_frame ;

  // inputs to muxes for submodule ports
  assign MUX_mdi_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ;

  // register mdi_rMDC
  assign mdi_rMDC$D_IN =
	     _1434766110945527031733894725304609466537681244_ETC__q2[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rMDC$EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rMDD
  assign mdi_rMDD$D_IN = bs__h2444[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rMDD$EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rOutEn
  assign mdi_rOutEn$D_IN = bs__h14969[mdi_rPlayIndex$Q_OUT] ;
  assign mdi_rOutEn$EN = CAN_FIRE_RL_mdi_run_frame ;

  // register mdi_rPhyAddr
  assign mdi_rPhyAddr$D_IN = mdi_fRequest$D_OUT[25:21] ;
  assign mdi_rPhyAddr$EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rRegAddr
  assign mdi_rRegAddr$D_IN = mdi_fRequest$D_OUT[20:16] ;
  assign mdi_rRegAddr$EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rState
  assign mdi_rState$D_IN = !MUX_mdi_rState$write_1__SEL_1 ;
  assign mdi_rState$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 ||
	     WILL_FIRE_RL_mdi_start ;

  // register mdi_rWrite
  assign mdi_rWrite$D_IN = mdi_fRequest$D_OUT[26] ;
  assign mdi_rWrite$EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_rWriteData
  assign mdi_rWriteData$D_IN = mdi_fRequest$D_OUT[15:0] ;
  assign mdi_rWriteData$EN = CAN_FIRE_RL_mdi_start ;

  // register mdi_vrReadData
  assign mdi_vrReadData$D_IN = mdi_tMDD$O ;
  assign mdi_vrReadData$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_1
  assign mdi_vrReadData_1$D_IN = mdi_vrReadData ;
  assign mdi_vrReadData_1$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_10
  assign mdi_vrReadData_10$D_IN = mdi_vrReadData_9 ;
  assign mdi_vrReadData_10$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_11
  assign mdi_vrReadData_11$D_IN = mdi_vrReadData_10 ;
  assign mdi_vrReadData_11$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_12
  assign mdi_vrReadData_12$D_IN = mdi_vrReadData_11 ;
  assign mdi_vrReadData_12$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_13
  assign mdi_vrReadData_13$D_IN = mdi_vrReadData_12 ;
  assign mdi_vrReadData_13$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_14
  assign mdi_vrReadData_14$D_IN = mdi_vrReadData_13 ;
  assign mdi_vrReadData_14$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_15
  assign mdi_vrReadData_15$D_IN = mdi_vrReadData_14 ;
  assign mdi_vrReadData_15$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_2
  assign mdi_vrReadData_2$D_IN = mdi_vrReadData_1 ;
  assign mdi_vrReadData_2$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_3
  assign mdi_vrReadData_3$D_IN = mdi_vrReadData_2 ;
  assign mdi_vrReadData_3$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_4
  assign mdi_vrReadData_4$D_IN = mdi_vrReadData_3 ;
  assign mdi_vrReadData_4$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_5
  assign mdi_vrReadData_5$D_IN = mdi_vrReadData_4 ;
  assign mdi_vrReadData_5$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_6
  assign mdi_vrReadData_6$D_IN = mdi_vrReadData_5 ;
  assign mdi_vrReadData_6$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_7
  assign mdi_vrReadData_7$D_IN = mdi_vrReadData_6 ;
  assign mdi_vrReadData_7$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_8
  assign mdi_vrReadData_8$D_IN = mdi_vrReadData_7 ;
  assign mdi_vrReadData_8$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // register mdi_vrReadData_9
  assign mdi_vrReadData_9$D_IN = mdi_vrReadData_8 ;
  assign mdi_vrReadData_9$EN =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT != 8'd0 &&
	     !mdi_rWrite &&
	     _643371375338640__q3[mdi_rPlayIndex$Q_OUT] ;

  // submodule gmac
  assign gmac$gmii_col_i = gmii_col_i ;
  assign gmac$gmii_crs_i = gmii_crs_i ;
  assign gmac$gmii_intr_i = gmii_intr_i ;
  assign gmac$gmii_rx_rx_dv_i = gmii_rx_rx_dv_i ;
  assign gmac$gmii_rx_rx_er_i = gmii_rx_rx_er_i ;
  assign gmac$gmii_rx_rxd_i = gmii_rx_rxd_i ;
  assign gmac$tx_put =
	     { CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q1,
	       gmac$rx_get[7:0] } ;
  assign gmac$EN_rx_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign gmac$EN_tx_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign gmac$EN_rxOperate = 1'b0 ;
  assign gmac$EN_txOperate = 1'b0 ;

  // submodule mdi_fRequest
  assign mdi_fRequest$D_IN = 27'h0 ;
  assign mdi_fRequest$ENQ = 1'b0 ;
  assign mdi_fRequest$DEQ = CAN_FIRE_RL_mdi_start ;
  assign mdi_fRequest$CLR = 1'b0 ;

  // submodule mdi_fResponse
  assign mdi_fResponse$D_IN = { 1'd1, x_data__h18167 } ;
  assign mdi_fResponse$ENQ =
	     WILL_FIRE_RL_mdi_run_frame && mdi_rPlayIndex$Q_OUT == 8'd0 &&
	     !mdi_rWrite ;
  assign mdi_fResponse$DEQ = 1'b0 ;
  assign mdi_fResponse$CLR = 1'b0 ;

  // submodule mdi_rPlayIndex
  assign mdi_rPlayIndex$DATA_A = 8'h0 ;
  assign mdi_rPlayIndex$DATA_B = 8'd255 ;
  assign mdi_rPlayIndex$DATA_C = 8'h0 ;
  assign mdi_rPlayIndex$DATA_F = 8'd194 ;
  assign mdi_rPlayIndex$ADDA = 1'b0 ;
  assign mdi_rPlayIndex$ADDB = CAN_FIRE_RL_mdi_run_frame ;
  assign mdi_rPlayIndex$SETC = 1'b0 ;
  assign mdi_rPlayIndex$SETF = CAN_FIRE_RL_mdi_start ;

  // submodule mdi_rPrescaler
  assign mdi_rPrescaler$DATA_A = 4'h0 ;
  assign mdi_rPrescaler$DATA_B = 4'd15 ;
  assign mdi_rPrescaler$DATA_C = 4'h0 ;
  assign mdi_rPrescaler$DATA_F = 4'd6 ;
  assign mdi_rPrescaler$ADDA = 1'b0 ;
  assign mdi_rPrescaler$ADDB = CAN_FIRE_RL_mdi_update_prescaler ;
  assign mdi_rPrescaler$SETC = 1'b0 ;
  assign mdi_rPrescaler$SETF = CAN_FIRE_RL_mdi_reset_prescaler ;

  // remaining internal signals
  assign _1434766110945527031733894725304609466537681244_ETC__q2 =
	     195'h2492492492492492492492492492492492492492492492492 ;
  assign _643371375338640__q3 =
	     195'h0000000000000000000000000000000000002492492492490 ;
  assign bs__h14969 =
	     mdi_rWrite ?
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8 :
	       195'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE00000000000000 ;
  assign bs__h2444 =
	     { mdi_rWrite ?
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1C7 :
		 108'hFFFFFFFFFFFFFFFFFFFFFFFF1F8,
	       pa4__h2043,
	       pa3__h2044,
	       pa2__h2045,
	       pa1__h2046,
	       pa0__h2047,
	       ra4__h2049,
	       ra3__h2050,
	       ra2__h2051,
	       ra1__h2052,
	       ra0__h2053,
	       6'd56,
	       d15__h2055,
	       d14__h2056,
	       d13__h2057,
	       d12__h2058,
	       d11__h2059,
	       d10__h2060,
	       d9__h2061,
	       d8__h2062,
	       d7__h2063,
	       d6__h2064,
	       d5__h2065,
	       d4__h2066,
	       d3__h2067,
	       d2__h2068,
	       d1__h2069,
	       d0__h2070,
	       3'b111 } ;
  assign d0__h2070 = {3{mdi_rWriteData[0]}} ;
  assign d10__h2060 = {3{mdi_rWriteData[10]}} ;
  assign d11__h2059 = {3{mdi_rWriteData[11]}} ;
  assign d12__h2058 = {3{mdi_rWriteData[12]}} ;
  assign d13__h2057 = {3{mdi_rWriteData[13]}} ;
  assign d14__h2056 = {3{mdi_rWriteData[14]}} ;
  assign d15__h2055 = {3{mdi_rWriteData[15]}} ;
  assign d1__h2069 = {3{mdi_rWriteData[1]}} ;
  assign d2__h2068 = {3{mdi_rWriteData[2]}} ;
  assign d3__h2067 = {3{mdi_rWriteData[3]}} ;
  assign d4__h2066 = {3{mdi_rWriteData[4]}} ;
  assign d5__h2065 = {3{mdi_rWriteData[5]}} ;
  assign d6__h2064 = {3{mdi_rWriteData[6]}} ;
  assign d7__h2063 = {3{mdi_rWriteData[7]}} ;
  assign d8__h2062 = {3{mdi_rWriteData[8]}} ;
  assign d9__h2061 = {3{mdi_rWriteData[9]}} ;
  assign pa0__h2047 = {3{mdi_rPhyAddr[0]}} ;
  assign pa1__h2046 = {3{mdi_rPhyAddr[1]}} ;
  assign pa2__h2045 = {3{mdi_rPhyAddr[2]}} ;
  assign pa3__h2044 = {3{mdi_rPhyAddr[3]}} ;
  assign pa4__h2043 = {3{mdi_rPhyAddr[4]}} ;
  assign ra0__h2053 = {3{mdi_rRegAddr[0]}} ;
  assign ra1__h2052 = {3{mdi_rRegAddr[1]}} ;
  assign ra2__h2051 = {3{mdi_rRegAddr[2]}} ;
  assign ra3__h2050 = {3{mdi_rRegAddr[3]}} ;
  assign ra4__h2049 = {3{mdi_rRegAddr[4]}} ;
  assign x_data__h18167 =
	     { mdi_vrReadData_15,
	       mdi_vrReadData_14,
	       mdi_vrReadData_13,
	       mdi_vrReadData_12,
	       mdi_vrReadData_11,
	       mdi_vrReadData_10,
	       mdi_vrReadData_9,
	       mdi_vrReadData_8,
	       mdi_vrReadData_7,
	       mdi_vrReadData_6,
	       mdi_vrReadData_5,
	       mdi_vrReadData_4,
	       mdi_vrReadData_3,
	       mdi_vrReadData_2,
	       mdi_vrReadData_1,
	       mdi_vrReadData } ;
  always@(gmac$rx_get)
  begin
    case (gmac$rx_get[9:8])
      2'd0, 2'd1, 2'd2:
	  CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q1 =
	      gmac$rx_get[9:8];
      2'd3: CASE_gmacrx_get_BITS_9_TO_8_3_0_gmacrx_get_B_ETC__q1 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        mdi_rMDC <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mdi_rMDD <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mdi_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (mdi_rMDC$EN) mdi_rMDC <= `BSV_ASSIGNMENT_DELAY mdi_rMDC$D_IN;
	if (mdi_rMDD$EN) mdi_rMDD <= `BSV_ASSIGNMENT_DELAY mdi_rMDD$D_IN;
	if (mdi_rOutEn$EN)
	  mdi_rOutEn <= `BSV_ASSIGNMENT_DELAY mdi_rOutEn$D_IN;
	if (mdi_rState$EN)
	  mdi_rState <= `BSV_ASSIGNMENT_DELAY mdi_rState$D_IN;
      end
    if (mdi_rPhyAddr$EN)
      mdi_rPhyAddr <= `BSV_ASSIGNMENT_DELAY mdi_rPhyAddr$D_IN;
    if (mdi_rRegAddr$EN)
      mdi_rRegAddr <= `BSV_ASSIGNMENT_DELAY mdi_rRegAddr$D_IN;
    if (mdi_rWrite$EN) mdi_rWrite <= `BSV_ASSIGNMENT_DELAY mdi_rWrite$D_IN;
    if (mdi_rWriteData$EN)
      mdi_rWriteData <= `BSV_ASSIGNMENT_DELAY mdi_rWriteData$D_IN;
    if (mdi_vrReadData$EN)
      mdi_vrReadData <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData$D_IN;
    if (mdi_vrReadData_1$EN)
      mdi_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_1$D_IN;
    if (mdi_vrReadData_10$EN)
      mdi_vrReadData_10 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_10$D_IN;
    if (mdi_vrReadData_11$EN)
      mdi_vrReadData_11 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_11$D_IN;
    if (mdi_vrReadData_12$EN)
      mdi_vrReadData_12 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_12$D_IN;
    if (mdi_vrReadData_13$EN)
      mdi_vrReadData_13 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_13$D_IN;
    if (mdi_vrReadData_14$EN)
      mdi_vrReadData_14 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_14$D_IN;
    if (mdi_vrReadData_15$EN)
      mdi_vrReadData_15 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_15$D_IN;
    if (mdi_vrReadData_2$EN)
      mdi_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_2$D_IN;
    if (mdi_vrReadData_3$EN)
      mdi_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_3$D_IN;
    if (mdi_vrReadData_4$EN)
      mdi_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_4$D_IN;
    if (mdi_vrReadData_5$EN)
      mdi_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_5$D_IN;
    if (mdi_vrReadData_6$EN)
      mdi_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_6$D_IN;
    if (mdi_vrReadData_7$EN)
      mdi_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_7$D_IN;
    if (mdi_vrReadData_8$EN)
      mdi_vrReadData_8 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_8$D_IN;
    if (mdi_vrReadData_9$EN)
      mdi_vrReadData_9 <= `BSV_ASSIGNMENT_DELAY mdi_vrReadData_9$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    mdi_rMDC = 1'h0;
    mdi_rMDD = 1'h0;
    mdi_rOutEn = 1'h0;
    mdi_rPhyAddr = 5'h0A;
    mdi_rRegAddr = 5'h0A;
    mdi_rState = 1'h0;
    mdi_rWrite = 1'h0;
    mdi_rWriteData = 16'hAAAA;
    mdi_vrReadData = 1'h0;
    mdi_vrReadData_1 = 1'h0;
    mdi_vrReadData_10 = 1'h0;
    mdi_vrReadData_11 = 1'h0;
    mdi_vrReadData_12 = 1'h0;
    mdi_vrReadData_13 = 1'h0;
    mdi_vrReadData_14 = 1'h0;
    mdi_vrReadData_15 = 1'h0;
    mdi_vrReadData_2 = 1'h0;
    mdi_vrReadData_3 = 1'h0;
    mdi_vrReadData_4 = 1'h0;
    mdi_vrReadData_5 = 1'h0;
    mdi_vrReadData_6 = 1'h0;
    mdi_vrReadData_7 = 1'h0;
    mdi_vrReadData_8 = 1'h0;
    mdi_vrReadData_9 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFTop_kc705

